From 39b4645edd8d5f4b11da81074c80c002d3f1608c Mon Sep 17 00:00:00 2001
From: "Nguyen Van Linh [FGA.BU13]" <LinhNV25@fsoft.com.vn>
Date: Tue, 10 Apr 2018 08:26:55 +0700
Subject: [PATCH 270/628] spi: rspi: Fix QSPI Buffer Control

    commit <f99dff41ed8b007e40719aa04d6ef74d0aa4a472>
    from git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-backport.git

    In transmission, when all transmit buffers are vacant,
    interrupt is generated.

Signed-off-by: Hisashi Nakamura <hisashi.nakamura.ak@renesas.com>
Signed-off-by: khanhluu <khanh.luu.xw@rvc.renesas.com>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNV25@fsoft.com.vn>
Signed-off-by: vietn <vietn@fsoft.com.vn>
---
 drivers/spi/spi-rspi.c | 90 +++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 85 insertions(+), 5 deletions(-)

diff --git a/drivers/spi/spi-rspi.c b/drivers/spi/spi-rspi.c
index 0556259..d489358 100644
--- a/drivers/spi/spi-rspi.c
+++ b/drivers/spi/spi-rspi.c
@@ -175,8 +175,20 @@
 /* SPBFCR - Buffer Control Register */
 #define SPBFCR_TXRST		0x80	/* Transmit Buffer Data Reset */
 #define SPBFCR_RXRST		0x40	/* Receive Buffer Data Reset */
-#define SPBFCR_TXTRG_MASK	0x30	/* Transmit Buffer Data Triggering Number */
-#define SPBFCR_RXTRG_MASK	0x07	/* Receive Buffer Data Triggering Number */
+#define SPBFCR_TXTRG_MASK	0x30	/* Transmit Buffer Data Triggering
+					   Number */
+#define SPBFCR_TXTRG_31B	0x00	/*   31 bytes (1 byte available) */
+#define SPBFCR_TXTRG_0B		0x30	/*   0 byte (32 bytes available) */
+#define SPBFCR_RXTRG_MASK	0x07	/* Receive Buffer Data Triggering
+					   Number */
+/*   1 byte (31 bytes available) */
+#define SPBFCR_RXTRG_1B		0x00	/*   1 byte (31 bytes available) */
+#define SPBFCR_RXTRG_2B		0x01	/*   2 bytes (30 bytes available) */
+#define SPBFCR_RXTRG_4B		0x02	/*   4 bytes (28 bytes available) */
+#define SPBFCR_RXTRG_8B		0x04	/*   8 bytes (24 bytes available) */
+#define SPBFCR_RXTRG_32B	0x07	/*   32 bytes (0 byte avaliable) */
+
+#define SPI_BUFFER_SIZE		32u	/* transmit and receive buffer size *
 /* QSPI on R-Car Gen2 */
 #define SPBFCR_TXTRG_1B		0x00	/* 31 bytes (1 byte available) */
 #define SPBFCR_TXTRG_32B	0x30	/* 0 byte (32 bytes available) */
@@ -226,6 +238,9 @@ static u16 rspi_read16(const struct rspi_data *rspi, u16 offset)
 	return ioread16(rspi->addr + offset);
 }
 
+#define rspi_update8(spi, mask, val, reg) \
+	rspi_write8(spi, (rspi_read8(spi, reg) & ~mask) | val, reg);
+
 static void rspi_write_data(const struct rspi_data *rspi, u16 data)
 {
 	if (rspi->byte_access)
@@ -507,6 +522,71 @@ static int rspi_pio_transfer(struct rspi_data *rspi, const u8 *tx, u8 *rx,
 	return 0;
 }
 
+static int rspi_pio_transfer_out(struct rspi_data *rspi, const u8 *tx,
+				 unsigned int n)
+{
+	int error, count, i;
+
+	if (!tx)
+		return 0;
+
+	while (n > 0) {
+		error = rspi_wait_for_tx_empty(rspi);
+		if (error < 0) {
+			dev_err(&rspi->master->dev, "transmit timeout\n");
+			return error;
+		}
+
+		count = min(n, SPI_BUFFER_SIZE);
+
+		for (i = 0; i < count; i++)
+			rspi_write_data(rspi, *tx++);
+		n -= count;
+	}
+
+	return 0;
+}
+
+static int rspi_pio_transfer_in(struct rspi_data *rspi, u8 *rx, unsigned int n)
+{
+	int error, count, i;
+
+	if (!rx)
+		return 0;
+
+
+	while (n > 0) {
+		count = min(n, SPI_BUFFER_SIZE);
+		if (count >= SPI_BUFFER_SIZE) {
+			rspi_update8(rspi, SPBFCR_RXTRG_MASK,
+				     SPBFCR_RXTRG_32B, QSPI_SPBFCR);
+
+			error = rspi_wait_for_rx_full(rspi);
+			if (error < 0) {
+				dev_err(&rspi->master->dev,
+					"receive timeout\n");
+				return error;
+			}
+
+			for (i = 0; i < count; i++)
+				*rx++ = rspi_read_data(rspi);
+		} else {
+			rspi_update8(rspi, SPBFCR_RXTRG_MASK,
+				     SPBFCR_RXTRG_1B, QSPI_SPBFCR);
+
+			for (i = 0; i < count; i++) {
+				int ret = rspi_data_in(rspi);
+				if (ret < 0)
+					return ret;
+				*rx++ = ret;
+			}
+		}
+		n -= count;
+	}
+
+	return 0;
+}
+
 static void rspi_dma_complete(void *arg)
 {
 	struct rspi_data *rspi = arg;
@@ -651,7 +731,7 @@ static void qspi_receive_init(const struct rspi_data *rspi)
 	if (spsr & SPSR_SPRF)
 		rspi_read_data(rspi);   /* dummy read */
 	rspi_write8(rspi, SPBFCR_TXRST | SPBFCR_RXRST, QSPI_SPBFCR);
-	rspi_write8(rspi, 0, QSPI_SPBFCR);
+	rspi_write8(rspi, SPBFCR_TXTRG_0B, QSPI_SPBFCR);
 }
 
 static bool __rspi_can_dma(const struct rspi_data *rspi,
@@ -788,7 +868,7 @@ static int qspi_transfer_out(struct rspi_data *rspi, struct spi_transfer *xfer)
 			return ret;
 	}
 
-	ret = rspi_pio_transfer(rspi, xfer->tx_buf, NULL, xfer->len);
+	ret = rspi_pio_transfer_out(rspi, xfer->tx_buf, xfer->len);
 	if (ret < 0)
 		return ret;
 
@@ -806,7 +886,7 @@ static int qspi_transfer_in(struct rspi_data *rspi, struct spi_transfer *xfer)
 			return ret;
 	}
 
-	return rspi_pio_transfer(rspi, NULL, xfer->rx_buf, xfer->len);
+	return rspi_pio_transfer_in(rspi, xfer->rx_buf, xfer->len);
 }
 
 static int qspi_transfer_one(struct spi_master *master, struct spi_device *spi,
-- 
2.7.4

