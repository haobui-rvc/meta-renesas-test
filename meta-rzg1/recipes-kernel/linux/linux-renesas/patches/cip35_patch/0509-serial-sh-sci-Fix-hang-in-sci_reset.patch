From ed43dbe6bbd21910ba66c388bc59363bd8c8ca5f Mon Sep 17 00:00:00 2001
From: Tung Vo <tung.vo.eb@rvc.renesas.com>
Date: Wed, 21 Mar 2018 14:12:52 +0700
Subject: [PATCH 509/628] serial: sh-sci: Fix hang in sci_reset()

	From:	https://patchwork.kernel.org/patch/9458341/

	When the .set_termios() callback resets the UART, it first waits until
	all characters in the transmit FIFO have been transmitted, to prevent a
	port configuration change from impacting these characters.

	However, if the previous user of the UART had dedicated RTS/CTS hardware
	flow control enabled, these characters may have been stuck in the FIFO
	due to CTS not being asserted. When the new user opens the port,
	.set_termios() is called while transmission is still disabled, leading
	to an infinite loop:

	    NMI watchdog: BUG: soft lockup - CPU#0 stuck for 22s!

	This has been observed with SCIFA (on r8a7740/armadillo) and SCIFB (on
	r8a7791/koelsch).

	The issue does not seem to happen when using:
	  - GPIO RTS/CTS hardware flow control,
	  - No hardware flow control,
	  - HSCIF (on r8a7791/koelsch).

	To fix this, wait for the draining of the transmit FIFO only if
	transmission is already enabled.

Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
Signed-off-by: Tung Vo <tung.vo.eb@rvc.renesas.com>
Signed-off-by: vietn <vietn@fsoft.com.vn>
---
 drivers/tty/serial/sh-sci.c | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/drivers/tty/serial/sh-sci.c b/drivers/tty/serial/sh-sci.c
index fda4c0c..2e62e49 100644
--- a/drivers/tty/serial/sh-sci.c
+++ b/drivers/tty/serial/sh-sci.c
@@ -2087,9 +2087,11 @@ static void sci_reset(struct uart_port *port)
 	const struct plat_sci_reg *reg;
 	unsigned int status;
 
-	do {
-		status = serial_port_in(port, SCxSR);
-	} while (!(status & SCxSR_TEND(port)));
+	if (serial_port_in(port, SCSCR) & SCSCR_TE) {
+		do {
+			status = serial_port_in(port, SCxSR);
+		} while (!(status & SCxSR_TEND(port)));
+	}
 
 	serial_port_out(port, SCSCR, 0x00);	/* TE=0, RE=0, CKE1=0 */
 
-- 
2.7.4

