From c4a1180ee6490688ec715567ca83be60d54b91b1 Mon Sep 17 00:00:00 2001
From: Roman Meshkevich <roman.meshkevich@cogentembedded.com>
Date: Mon, 10 Oct 2016 17:08:55 +0300
Subject: [PATCH 109/628] rcar-du: call vsp methods only if device is present.

On r8a7745 VSP has only one channel and two displays. Du.0 creates connection with vsp-du.
But Du.1 inits only planes...

Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNV25@fsoft.com.vn>
Signed-off-by: vietn <vietn@fsoft.com.vn>
---
 drivers/gpu/drm/rcar-du/rcar_du_crtc.c |   6 +-
 drivers/gpu/drm/rcar-du/rcar_du_vsp.c  | 130 +++++++++++++++++----------------
 2 files changed, 73 insertions(+), 63 deletions(-)

diff --git a/drivers/gpu/drm/rcar-du/rcar_du_crtc.c b/drivers/gpu/drm/rcar-du/rcar_du_crtc.c
index f78db13..d15d3e5 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_crtc.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_crtc.c
@@ -255,8 +255,10 @@ static void rcar_du_crtc_update_planes(struct rcar_du_crtc *rcrtc)
 	/* If VSP+DU integration is enabled the plane assignment is fixed. */
 	if (rcar_du_has(rcdu, RCAR_DU_FEATURE_VSP1_SOURCE)) {
 		if (rcdu->info->gen < 3) {
-			dspr = (rcrtc->index % 2) + 1;
-			hwplanes = 1 << (rcrtc->index % 2);
+			if (rcrtc->vsp->vsp) {
+				dspr = (rcrtc->index % 2) + 1;
+				hwplanes = 1 << (rcrtc->index % 2);
+			}
 		} else {
 			dspr = (rcrtc->index % 2) ? 3 : 1;
 			hwplanes = 1 << ((rcrtc->index % 2) ? 2 : 0);
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_vsp.c b/drivers/gpu/drm/rcar-du/rcar_du_vsp.c
index 24acee1..7c1bfb6 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_vsp.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_vsp.c
@@ -30,58 +30,63 @@
 
 void rcar_du_vsp_enable(struct rcar_du_crtc *crtc)
 {
-	const struct drm_display_mode *mode = &crtc->crtc.state->adjusted_mode;
-	struct rcar_du_device *rcdu = crtc->group->dev;
-	struct rcar_du_plane_state state = {
-		.state = {
-			.crtc = &crtc->crtc,
-			.crtc_x = 0,
-			.crtc_y = 0,
-			.crtc_w = mode->hdisplay,
-			.crtc_h = mode->vdisplay,
-			.src_x = 0,
-			.src_y = 0,
-			.src_w = mode->hdisplay << 16,
-			.src_h = mode->vdisplay << 16,
-		},
-		.format = rcar_du_format_info(DRM_FORMAT_ARGB8888),
-		.source = RCAR_DU_PLANE_VSPD1,
-		.alpha = 255,
-		.colorkey = 0,
-		.zpos = 0,
-	};
-
-	if (rcdu->info->gen >= 3)
-		state.hwindex = (crtc->index % 2) ? 2 : 0;
-	else
-		state.hwindex = crtc->index % 2;
-
-	__rcar_du_plane_setup(crtc->group, &state);
-
-	/* Ensure that the plane source configuration takes effect by requesting
-	 * a restart of the group. See rcar_du_plane_atomic_update() for a more
-	 * detailed explanation.
-	 *
-	 * TODO: Check whether this is still needed on Gen3.
-	 */
-	crtc->group->need_restart = true;
-
-	vsp1_du_setup_lif(crtc->vsp->vsp, mode->hdisplay, mode->vdisplay);
+	if (crtc->vsp->vsp) {
+		const struct drm_display_mode *mode = &crtc->crtc.state->adjusted_mode;
+		struct rcar_du_device *rcdu = crtc->group->dev;
+		struct rcar_du_plane_state state = {
+			.state = {
+				.crtc = &crtc->crtc,
+				.crtc_x = 0,
+				.crtc_y = 0,
+				.crtc_w = mode->hdisplay,
+				.crtc_h = mode->vdisplay,
+				.src_x = 0,
+				.src_y = 0,
+				.src_w = mode->hdisplay << 16,
+				.src_h = mode->vdisplay << 16,
+			},
+			.format = rcar_du_format_info(DRM_FORMAT_ARGB8888),
+			.source = RCAR_DU_PLANE_VSPD0,
+			.alpha = 255,
+			.colorkey = 0,
+			.zpos = 1,
+		};
+
+		if (rcdu->info->gen >= 3)
+			state.hwindex = (crtc->index % 2) ? 2 : 0;
+		else
+			state.hwindex = crtc->index % 2;
+
+		__rcar_du_plane_setup(crtc->group, &state);
+
+		/* Ensure that the plane source configuration takes effect by requesting
+		 * a restart of the group. See rcar_du_plane_atomic_update() for a more
+		 * detailed explanation.
+		 *
+		 * TODO: Check whether this is still needed on Gen3.
+		 */
+		crtc->group->need_restart = true;
+
+		vsp1_du_setup_lif(crtc->vsp->vsp, mode->hdisplay, mode->vdisplay);
+	}
 }
 
 void rcar_du_vsp_disable(struct rcar_du_crtc *crtc)
 {
-	vsp1_du_setup_lif(crtc->vsp->vsp, 0, 0);
+	if (crtc->vsp->vsp)
+		vsp1_du_setup_lif(crtc->vsp->vsp, 0, 0);
 }
 
 void rcar_du_vsp_atomic_begin(struct rcar_du_crtc *crtc)
 {
-	vsp1_du_atomic_begin(crtc->vsp->vsp);
+	if (crtc->vsp->vsp)
+		vsp1_du_atomic_begin(crtc->vsp->vsp);
 }
 
 void rcar_du_vsp_atomic_flush(struct rcar_du_crtc *crtc)
 {
-	vsp1_du_atomic_flush(crtc->vsp->vsp);
+	if (crtc->vsp->vsp)
+		vsp1_du_atomic_flush(crtc->vsp->vsp);
 }
 
 /* Keep the two tables in sync. */
@@ -170,8 +175,9 @@ static void rcar_du_vsp_plane_setup(struct rcar_du_vsp_plane *plane)
 
 	WARN_ON(!pixelformat);
 
-	vsp1_du_atomic_update(plane->vsp->vsp, plane->index, pixelformat,
-			      fb->pitches[0], paddr, &src, &dst);
+	if (plane->vsp->vsp)
+		vsp1_du_atomic_update(plane->vsp->vsp, plane->index, pixelformat,
+				fb->pitches[0], paddr, &src, &dst);
 }
 
 static int rcar_du_vsp_plane_atomic_check(struct drm_plane *plane,
@@ -207,11 +213,12 @@ static void rcar_du_vsp_plane_atomic_update(struct drm_plane *plane,
 {
 	struct rcar_du_vsp_plane *rplane = to_rcar_vsp_plane(plane);
 
-	if (plane->state->crtc)
-		rcar_du_vsp_plane_setup(rplane);
-	else
-		vsp1_du_atomic_update(rplane->vsp->vsp, rplane->index, 0, 0, 0,
-				      NULL, NULL);
+	if (rplane->vsp->vsp) {
+		if (plane->state->crtc)
+			rcar_du_vsp_plane_setup(rplane);
+		else
+			vsp1_du_atomic_update(rplane->vsp->vsp, rplane->index, 0, 0, 0, NULL, NULL);
+	}
 }
 
 static const struct drm_plane_helper_funcs rcar_du_vsp_plane_helper_funcs = {
@@ -316,23 +323,24 @@ int rcar_du_vsp_init(struct rcar_du_vsp *vsp)
 	int ret;
 
 	/* Find the VSP device and initialize it. */
-	np = of_parse_phandle(rcdu->dev->of_node, "vsps", vsp->index);
-	if (!np) {
-		dev_err(rcdu->dev, "vsps node not found\n");
-		return -ENXIO;
-	}
-
-	pdev = of_find_device_by_node(np);
-	of_node_put(np);
-	if (!pdev)
-		return -ENXIO;
+	if ((1 << vsp->index) & (rcdu->info->vspd_crtcs)) {
+		np = of_parse_phandle(rcdu->dev->of_node, "vsps", vsp->index);
+		if (!np) {
+			dev_err(rcdu->dev, "vsps node not found\n");
+			return -ENXIO;
+		}
 
-	vsp->vsp = &pdev->dev;
+		pdev = of_find_device_by_node(np);
+		of_node_put(np);
+		if (!pdev)
+			return -ENXIO;
 
-	ret = vsp1_du_init(vsp->vsp);
-	if (ret < 0)
-		return ret;
+		vsp->vsp = &pdev->dev;
 
+		ret = vsp1_du_init(vsp->vsp);
+		if (ret < 0)
+			return ret;
+	}
 	 /* The VSP2D (Gen3) has 5 RPFs, but the VSP1D (Gen2) is limited to
 	  * 4 RPFs.
 	  */
-- 
2.7.4

