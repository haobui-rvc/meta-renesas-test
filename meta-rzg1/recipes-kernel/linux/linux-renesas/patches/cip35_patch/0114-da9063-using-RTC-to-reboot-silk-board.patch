From 7ac0f98e470af3bcdbe9093ff6b55c5a23b68cd8 Mon Sep 17 00:00:00 2001
From: vietn <vietn@fsoft.com.vn>
Date: Sun, 24 Dec 2017 02:20:11 +0700
Subject: [PATCH 114/628] da9063: using RTC to reboot silk board

SILK do have "wake" button. By default on Silk, reboot
switches off PMIC leading to halted state. The configuration
of PMIC allows only buttons or RTC wakeup, which will
get board out of switched-off state. This patch
uses RTC to reboot the board.

Signed-off-by: vietn <vietn@fsoft.com.vn>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNV25@fsoft.com.vn>
Signed-off-by: vietn <vietn@fsoft.com.vn>
---
 arch/arm/mach-shmobile/regulator-quirk-rcar-gen2.c |  3 +-
 drivers/rtc/Kconfig                                |  8 +++
 drivers/rtc/rtc-da9063.c                           | 65 ++++++++++++++++++++++
 drivers/watchdog/da9063_wdt.c                      |  8 +++
 4 files changed, 83 insertions(+), 1 deletion(-)

diff --git a/arch/arm/mach-shmobile/regulator-quirk-rcar-gen2.c b/arch/arm/mach-shmobile/regulator-quirk-rcar-gen2.c
index d5c0e50..3bc11b3 100644
--- a/arch/arm/mach-shmobile/regulator-quirk-rcar-gen2.c
+++ b/arch/arm/mach-shmobile/regulator-quirk-rcar-gen2.c
@@ -115,7 +115,8 @@ static int __init rcar_gen2_regulator_quirk(void)
 	if (!of_machine_is_compatible("renesas,koelsch") &&
 	    !of_machine_is_compatible("renesas,lager") &&
 	    !of_machine_is_compatible("renesas,gose") &&
-	    !of_machine_is_compatible("renesas,skrzg1m"))
+	    !of_machine_is_compatible("renesas,skrzg1m") &&
+	    !of_machine_is_compatible("renesas,skrzg1e"))
 		return -ENODEV;
 
 	irqc = ioremap(IRQC_BASE, PAGE_SIZE);
diff --git a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
index 2a52424..30390f5 100644
--- a/drivers/rtc/Kconfig
+++ b/drivers/rtc/Kconfig
@@ -963,6 +963,14 @@ config RTC_DRV_DA9063
 	  This driver can also be built as a module. If so, the module
 	  will be called "rtc-da9063".
 
+config RTC_DA9063_RESET_RENESAS_SILK
+	bool "DA9063 hack to reset SILK using RTC"
+	depends on RTC_DRV_DA9063
+	default y if MFD_DA9063 || MFD_DA9062
+	help
+	  If you say yes here you will be able to reboot SILK board
+	  via system reboot command.
+
 config RTC_DRV_EFI
 	tristate "EFI RTC"
 	depends on EFI && !X86
diff --git a/drivers/rtc/rtc-da9063.c b/drivers/rtc/rtc-da9063.c
index e93beec..0cf2527 100644
--- a/drivers/rtc/rtc-da9063.c
+++ b/drivers/rtc/rtc-da9063.c
@@ -22,6 +22,7 @@
 #include <linux/regmap.h>
 #include <linux/rtc.h>
 #include <linux/slab.h>
+#include <linux/reboot.h>
 
 #include <linux/mfd/da9062/registers.h>
 #include <linux/mfd/da9063/registers.h>
@@ -76,6 +77,7 @@ struct da9063_compatible_rtc {
 	struct regmap *regmap;
 	const struct da9063_compatible_rtc_regmap *config;
 	bool rtc_sync;
+	struct notifier_block restart_handler;
 };
 
 static const struct da9063_compatible_rtc_regmap da9063_ad_regs = {
@@ -390,6 +392,59 @@ static const struct rtc_class_ops da9063_rtc_ops = {
 	.set_alarm = da9063_rtc_set_alarm,
 	.alarm_irq_enable = da9063_rtc_alarm_irq_enable,
 };
+#ifdef CONFIG_RTC_DA9063_RESET_RENESAS_SILK
+static int da9063_rtc_restart_handler(struct notifier_block *this,
+				      unsigned long mode, void *cmd)
+{
+	struct da9063_compatible_rtc *rtc = container_of(this,
+						   struct da9063_compatible_rtc,
+						   restart_handler);
+	const struct da9063_compatible_rtc_regmap *config = rtc->config;
+	u8 data[RTC_DATA_LEN];
+	int ret;
+	struct rtc_time tm;
+	time64_t tmptime;
+	/* Switching alarm off */
+	ret = regmap_write_bits(rtc->regmap,
+				  config->rtc_alarm_year_reg,
+				  config->rtc_alarm_on_mask,
+				  0);
+	if (ret < 0) {
+		dev_err(&rtc->rtc_dev->dev, "Failed to stop alarm: %d\n", ret);
+	}
+
+	ret = regmap_bulk_read(rtc->regmap,
+			       config->rtc_count_secs_reg,
+			       data, RTC_DATA_LEN);
+	if (ret < 0) {
+		dev_err(&rtc->rtc_dev->dev, "Failed to read RTC time data: %d\n", ret);
+	}
+
+	da9063_data_to_tm(data, &tm, rtc);
+	tmptime = rtc_tm_to_time64(&tm);
+	tmptime += 1;
+	rtc_time64_to_tm(tmptime, &tm);
+
+	da9063_tm_to_data(&tm, data, rtc);
+	ret = regmap_bulk_write(rtc->regmap,
+				config->rtc_alarm_secs_reg,
+				&data[config->rtc_data_start],
+				config->rtc_alarm_len);
+	if (ret < 0) {
+		dev_err(&rtc->rtc_dev->dev, "Failed to write alarm: %d\n", ret);
+	}
+	/* Enabling alarm */
+	ret = regmap_write_bits(rtc->regmap,
+				  config->rtc_alarm_year_reg,
+				  config->rtc_alarm_on_mask,
+				  config->rtc_alarm_on_mask);
+
+	/* Be sure all RTC configuration settle */
+	mdelay(20);
+
+	return NOTIFY_DONE;
+}
+#endif
 
 static int da9063_rtc_probe(struct platform_device *pdev)
 {
@@ -506,6 +561,16 @@ static int da9063_rtc_probe(struct platform_device *pdev)
 	if (ret)
 		dev_err(&pdev->dev, "Failed to request ALARM IRQ %d: %d\n",
 			irq_alarm, ret);
+	if (of_machine_is_compatible("renesas,skrzg1e")) {
+#ifdef CONFIG_RTC_DA9063_RESET_RENESAS_SILK
+		rtc->restart_handler.notifier_call = da9063_rtc_restart_handler;
+		rtc->restart_handler.priority = 130;
+		ret = register_restart_handler(&rtc->restart_handler);
+		if (ret)
+			dev_err(&pdev->dev,
+				"Failed to register restart handler (err = %d)\n", ret);
+#endif
+	}
 
 	return ret;
 }
diff --git a/drivers/watchdog/da9063_wdt.c b/drivers/watchdog/da9063_wdt.c
index 6bf130b..b8393ed 100644
--- a/drivers/watchdog/da9063_wdt.c
+++ b/drivers/watchdog/da9063_wdt.c
@@ -22,6 +22,8 @@
 #include <linux/mfd/da9063/core.h>
 #include <linux/reboot.h>
 #include <linux/regmap.h>
+#include <linux/of.h>
+#include <linux/io.h>
 
 /*
  * Watchdog selector to timeout in seconds.
@@ -129,8 +131,14 @@ static int da9063_wdt_restart_handler(struct notifier_block *this,
 						   restart_handler);
 	int ret;
 
+#ifdef CONFIG_RTC_DA9063_RESET_RENESAS_SILK
+	/* To be sure RTC interrupt triggered */
+	mdelay(1000);
+#endif
+
 	ret = regmap_write(wdt->da9063->regmap, DA9063_REG_CONTROL_F,
 			   DA9063_SHUTDOWN);
+
 	if (ret)
 		dev_alert(wdt->da9063->dev, "Failed to shutdown (err = %d)\n",
 			  ret);
-- 
2.7.4

