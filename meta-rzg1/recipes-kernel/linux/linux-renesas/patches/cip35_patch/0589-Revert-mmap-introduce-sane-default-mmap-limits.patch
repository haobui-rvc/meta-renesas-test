From 8da554737b7e24eb979459f9f903a7f270ad708b Mon Sep 17 00:00:00 2001
From: Binh Nguyen <binh.nguyen.uw@rvc.renesas.com>
Date: Thu, 12 Jul 2018 17:25:11 +0700
Subject: [PATCH 589/628] Revert "mmap: introduce sane default mmap limits"

This reverts commit bd2f9ce5bacb ("mmap: introduce sane
	default mmap limits")

Signed-off-by: Thao M. Hoang <thaohm2@fsoft.com.vn>
Signed-off-by: Binh Nguyen <binh.nguyen.uw@rvc.renesas.com>
---
 mm/mmap.c | 32 --------------------------------
 1 file changed, 32 deletions(-)

diff --git a/mm/mmap.c b/mm/mmap.c
index b314455..b04482a 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -1288,35 +1288,6 @@ static inline int mlock_future_check(struct mm_struct *mm,
 	return 0;
 }
 
-static inline u64 file_mmap_size_max(struct file *file, struct inode *inode)
-{
-	if (S_ISREG(inode->i_mode))
-		return inode->i_sb->s_maxbytes;
-
-	if (S_ISBLK(inode->i_mode))
-		return MAX_LFS_FILESIZE;
-
-	/* Special "we do even unsigned file positions" case */
-	if (file->f_mode & FMODE_UNSIGNED_OFFSET)
-		return 0;
-
-	/* Yes, random drivers might want more. But I'm tired of buggy drivers */
-	return ULONG_MAX;
-}
-
-static inline bool file_mmap_ok(struct file *file, struct inode *inode,
-				unsigned long pgoff, unsigned long len)
-{
-	u64 maxsize = file_mmap_size_max(file, inode);
-
-	if (maxsize && len > maxsize)
-		return false;
-	maxsize -= len;
-	if (pgoff > maxsize >> PAGE_SHIFT)
-		return false;
-	return true;
-}
-
 /*
  * The caller must hold down_write(&current->mm->mmap_sem).
  */
@@ -1382,9 +1353,6 @@ unsigned long do_mmap(struct file *file, unsigned long addr,
 	if (file) {
 		struct inode *inode = file_inode(file);
 
-		if (!file_mmap_ok(file, inode, pgoff, len))
-			return -EOVERFLOW;
-
 		switch (flags & MAP_TYPE) {
 		case MAP_SHARED:
 			if ((prot&PROT_WRITE) && !(file->f_mode&FMODE_WRITE))
-- 
2.7.4

