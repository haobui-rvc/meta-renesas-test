From 04c7fdec221104a6472fe43d088f2a7c1c0931ff Mon Sep 17 00:00:00 2001
From: Nhan Nguyen <nhan.nguyen.yb@renesas.com>
Date: Wed, 14 Nov 2018 16:02:45 +0700
Subject: [PATCH 597/628] media: soc_camera: rcar_vin: set window for vin

In previous commit, setting window in rcar_vin_set_rect
 is separated by if-else for RZ/G1C and other device.
This commit merge into  one unifined setting to keep the
code clean.

Signed-off-by: Nhan Nguyen <nhan.nguyen.yb@renesas.com>
---
 drivers/media/platform/soc_camera/rcar_vin.c | 112 ++++++++++-----------------
 1 file changed, 40 insertions(+), 72 deletions(-)

diff --git a/drivers/media/platform/soc_camera/rcar_vin.c b/drivers/media/platform/soc_camera/rcar_vin.c
index d6671a0..75f9c43 100644
--- a/drivers/media/platform/soc_camera/rcar_vin.c
+++ b/drivers/media/platform/soc_camera/rcar_vin.c
@@ -1080,9 +1080,6 @@ static int rcar_vin_set_rect(struct soc_camera_device *icd)
 	struct v4l2_rect *cam_subrect = &cam->subrect;
 	u32 value = 0;
 
-	if (priv->chip == RZ_G1C)
-		cam->vin_top = 16;
-
 	dev_dbg(icd->parent, "Crop %ux%u@%u:%u\n",
 		icd->user_width, icd->user_height, cam->vin_left, cam->vin_top);
 
@@ -1099,81 +1096,49 @@ static int rcar_vin_set_rect(struct soc_camera_device *icd)
 		cam_subrect->width, cam_subrect->height,
 		cam_subrect->left, cam_subrect->top);
 
-	if (priv->chip == RZ_G1C) {
-		/* Need to set same size with the DVDEC output */
-		iowrite32(cam_subrect->top, priv->base + VNSLPRC_REG);
-		iowrite32(cam_subrect->top + cam_subrect->height - 1,
-				priv->base + VNELPRC_REG);
-		iowrite32(cam_subrect->left, priv->base + VNSPPRC_REG);
-		iowrite32(cam_subrect->left + cam_subrect->width - 1,
-				priv->base + VNEPPRC_REG);
-		/* Set scaling coefficient */
-		value = 0;
-		if ((cam_subrect->height * 2) != cam->out_height)
-				value = (4096 * (cam_subrect->height * 2))
-						/ cam->out_height;
-		iowrite32(value, priv->base + VNYS_REG);
-		value = 0;
-		if (cam_subrect->width != cam->out_width)
-				value = (4096 * cam_subrect->width) / cam->out_width;
-		/* Horizontal enlargement is up to double size */
-		if (0 < value  && value < 0x0800)
-				value = 0x0800;
-		iowrite32(value, priv->base + VNXS_REG);
-		/* Horizontal enlargement is carried out */
-		/* by scaling down from double size */
-		if (value < 0x1000)
-				value *= 2;
-		set_coeff(priv, value);
-	} else {
-		/* Set Start/End Pixel/Line Pre-Clip */
-		iowrite32(left_offset << dsize, priv->base + VNSPPRC_REG);
-		iowrite32((left_offset + cam_subrect->width - 1) << dsize,
-			priv->base + VNEPPRC_REG);
-
-		value = (4096 * cam_subrect->height) / cam->out_height;
+	/* Set Start/End Pixel/Line Pre-Clip */
+	iowrite32(left_offset << dsize, priv->base + VNSPPRC_REG);
+	iowrite32((left_offset + cam_subrect->width - 1) << dsize,
+		priv->base + VNEPPRC_REG);
 
-		switch (priv->field) {
-		case V4L2_FIELD_INTERLACED:
-		case V4L2_FIELD_INTERLACED_TB:
-		case V4L2_FIELD_INTERLACED_BT:
-			iowrite32(top_offset / 2, priv->base + VNSLPRC_REG);
-			iowrite32((top_offset + cam_subrect->height) / 2 +
-				get_addon(cam_subrect->height / 2, value),
-				priv->base + VNELPRC_REG);
-			break;
-		default:
-			iowrite32(top_offset, priv->base + VNSLPRC_REG);
-			iowrite32(top_offset + cam_subrect->height +
-				get_addon(cam_subrect->height, value),
-				priv->base + VNELPRC_REG);
-			break;
-		}
+	switch (priv->field) {
+	case V4L2_FIELD_INTERLACED:
+	case V4L2_FIELD_INTERLACED_TB:
+	case V4L2_FIELD_INTERLACED_BT:
+		iowrite32(top_offset / 2, priv->base + VNSLPRC_REG);
+		iowrite32((top_offset + cam_subrect->height) / 2 - 1,
+			priv->base + VNELPRC_REG);
+		break;
+	default:
+		iowrite32(top_offset, priv->base + VNSLPRC_REG);
+		iowrite32(top_offset + cam_subrect->height - 1,
+			priv->base + VNELPRC_REG);
+		break;
+	}
 
-		/* Set scaling coefficient */
-		value = 0;
-		if (cam_subrect->height != cam->out_height)
-			value = (4096 * cam_subrect->height) / cam->out_height;
-		dev_dbg(icd->parent, "YS Value: %x\n", value);
-		iowrite32(value, priv->base + VNYS_REG);
+	/* Set scaling coefficient */
+	value = 0;
+	if (cam_subrect->height != cam->out_height)
+		value = (4096 * cam_subrect->height) / cam->out_height;
+	dev_dbg(icd->parent, "YS Value: %x\n", value);
+	iowrite32(value, priv->base + VNYS_REG);
 
-		value = 0;
-		if (cam_subrect->width != cam->out_width)
-			value = (4096 * cam_subrect->width) / cam->out_width;
+	value = 0;
+	if (cam_subrect->width != cam->out_width)
+		value = (4096 * cam_subrect->width) / cam->out_width;
 
-		/* Horizontal upscaling is up to double size */
-		if (0 < value && value < 2048)
-			value = 2048;
+	/* Horizontal upscaling is up to double size */
+	if (value > 0 && value < 2048)
+		value = 2048;
 
-		dev_dbg(icd->parent, "XS Value: %x\n", value);
-		iowrite32(value, priv->base + VNXS_REG);
+	dev_dbg(icd->parent, "XS Value: %x\n", value);
+	iowrite32(value, priv->base + VNXS_REG);
 
-		/* Horizontal upscaling is carried out by scaling down from double size */
-		if (value < 4096)
-			value *= 2;
+	/* Horizontal upscaling is carried out by scaling down from double size */
+	if (value < 4096)
+		value *= 2;
 
-		set_coeff(priv, value);
-	}
+	set_coeff(priv, value);
 
 	/* Set Start/End Pixel/Line Post-Clip */
 	iowrite32(0, priv->base + VNSPPOC_REG);
@@ -1191,7 +1156,10 @@ static int rcar_vin_set_rect(struct soc_camera_device *icd)
 		break;
 	}
 
-	iowrite32(ALIGN(cam->out_width, 0x10), priv->base + VNIS_REG);
+	if (icd->current_fmt->host_fmt->fourcc == V4L2_PIX_FMT_NV16)
+		iowrite32(ALIGN(cam->out_width, 0x20), priv->base + VNIS_REG);
+	else
+		iowrite32(ALIGN(cam->out_width, 0x10), priv->base + VNIS_REG);
 
 	return 0;
 }
-- 
2.7.4

