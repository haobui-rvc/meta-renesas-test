From 36ef38fad7cb0d7b5ebdd4e29d3367b71afcd907 Mon Sep 17 00:00:00 2001
From: khatran <kha.tran.px@rvc.renesas.com>
Date: Wed, 14 Nov 2018 16:23:48 +0700
Subject: [PATCH 583/628] reboot: Fixed reboot issue of G1C on CIP lastest
 kernel

This issue rarely occurs. We got issue #Disabling irq #82.
And when this issue occurs, system is stopped at this step.
Because ohci and ehci use same IRQ ID. So sometimes system can not
handle OHCI interrupt. Avoid disabling ohci
IRQ when rh_status of ohci is halted

Signed-off-by: khatran <kha.tran.px@rvc.renesas.com>
---
 drivers/usb/host/ohci-hcd.c | 23 +++++++++++++++++++++--
 1 file changed, 21 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/host/ohci-hcd.c b/drivers/usb/host/ohci-hcd.c
index 2d9b10fb..55e9533 100644
--- a/drivers/usb/host/ohci-hcd.c
+++ b/drivers/usb/host/ohci-hcd.c
@@ -80,6 +80,7 @@ static const char	hcd_name [] = "ohci_hcd";
 static void ohci_dump(struct ohci_hcd *ohci);
 static void ohci_stop(struct usb_hcd *hcd);
 static void io_watchdog_func(unsigned long _ohci);
+int is_ohci_shutdown;
 
 #include "ohci-hub.c"
 #include "ohci-dbg.c"
@@ -420,6 +421,7 @@ ohci_shutdown (struct usb_hcd *hcd)
 {
 	struct ohci_hcd *ohci;
 
+	is_ohci_shutdown = 1;
 	ohci = hcd_to_ohci (hcd);
 	if (!ohci_readl(ohci, &ohci->regs->intrdisable)) {
 		ohci_writel(ohci, (u32) ~0, &ohci->regs->intrdisable);
@@ -881,8 +883,25 @@ static irqreturn_t ohci_irq (struct usb_hcd *hcd)
 	ints &= ohci_readl(ohci, &regs->intrenable);
 
 	/* interrupt for some other device? */
-	if (ints == 0 || unlikely(ohci->rh_state == OHCI_RH_HALTED))
-		return IRQ_NOTMINE;
+	if (ints == 0 || unlikely(ohci->rh_state == OHCI_RH_HALTED)) {
+		if (is_ohci_shutdown) {
+			if (of_machine_is_compatible("renesas,r8a77470")) {
+				/*
+				* Try to disable the detection of resume
+				* signaling and the change of the status
+				* of root hub before shutdowning ohci
+				*/
+				ohci_writel(ohci, OHCI_INTR_RD,
+						&regs->intrdisable);
+				ohci_writel(ohci, OHCI_INTR_RHSC,
+						&regs->intrdisable);
+				is_ohci_shutdown = 0;
+				return IRQ_HANDLED;
+			}
+		} else {
+			return IRQ_NOTMINE;
+		}
+	}
 
 	if (ints & OHCI_INTR_UE) {
 		// e.g. due to PCI Master/Target Abort
-- 
2.7.4

