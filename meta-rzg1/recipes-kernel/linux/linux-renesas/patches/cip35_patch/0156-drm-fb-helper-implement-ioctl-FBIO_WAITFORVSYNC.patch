From 58791c94fb8fd76d48a2a3c830d92dcc6e59b6ba Mon Sep 17 00:00:00 2001
From: thongsyho <thong.ho.px@rvc.renesas.com>
Date: Tue, 12 Sep 2017 09:59:16 +0700
Subject: [PATCH 156/628] drm/fb-helper: implement ioctl FBIO_WAITFORVSYNC

commit 0f3bbe074dd1 ("drm/fb-helper: implement ioctl FBIO_WAITFORVSYNC")

Implement legacy framebuffer ioctl FBIO_WAITFORVSYNC in the generic
framebuffer emulation driver. Legacy framebuffer users like non kms/drm
based OpenGL(ES)/EGL implementations may require the ioctl to
synchronize drawing or buffer flip for double buffering. It is tested on
the i.MX6.

Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
Tested-by: Neil Armstrong <narmstrong@baylibre.com>
Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
Signed-off-by: thongsyho <thong.ho.px@rvc.renesas.com>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNV25@fsoft.com.vn>
Signed-off-by: vietn <vietn@fsoft.com.vn>
---
 drivers/gpu/drm/drm_fb_cma_helper.c |  1 +
 drivers/gpu/drm/drm_fb_helper.c     | 63 +++++++++++++++++++++++++++++++++++++
 include/drm/drm_fb_helper.h         |  9 ++++++
 3 files changed, 73 insertions(+)

diff --git a/drivers/gpu/drm/drm_fb_cma_helper.c b/drivers/gpu/drm/drm_fb_cma_helper.c
index 7c0d613..73c4ab8 100644
--- a/drivers/gpu/drm/drm_fb_cma_helper.c
+++ b/drivers/gpu/drm/drm_fb_cma_helper.c
@@ -231,6 +231,7 @@ static struct fb_ops drm_fbdev_cma_ops = {
 	.fb_blank	= drm_fb_helper_blank,
 	.fb_pan_display	= drm_fb_helper_pan_display,
 	.fb_setcmap	= drm_fb_helper_setcmap,
+	.fb_ioctl       = drm_fb_helper_ioctl,
 };
 
 static int drm_fbdev_cma_create(struct drm_fb_helper *helper,
diff --git a/drivers/gpu/drm/drm_fb_helper.c b/drivers/gpu/drm/drm_fb_helper.c
index 75767f8..82cf7ca 100644
--- a/drivers/gpu/drm/drm_fb_helper.c
+++ b/drivers/gpu/drm/drm_fb_helper.c
@@ -1099,6 +1099,69 @@ int drm_fb_helper_setcmap(struct fb_cmap *cmap, struct fb_info *info)
 EXPORT_SYMBOL(drm_fb_helper_setcmap);
 
 /**
+ * drm_fb_helper_ioctl - legacy ioctl implementation
+ * @info: fbdev registered by the helper
+ * @cmd: ioctl command
+ * @arg: ioctl argument
+ *
+ * A helper to implement the standard fbdev ioctl. Only
+ * FBIO_WAITFORVSYNC is implemented for now.
+ */
+int drm_fb_helper_ioctl(struct fb_info *info, unsigned int cmd,
+							unsigned long arg)
+{
+		struct drm_fb_helper *fb_helper = info->par;
+		struct drm_device *dev = fb_helper->dev;
+		struct drm_mode_set *mode_set;
+		struct drm_crtc *crtc;
+		int ret = 0;
+		mutex_lock(&dev->mode_config.mutex);
+		if (!drm_fb_helper_is_bound(fb_helper)) {
+				ret = -EBUSY;
+				goto unlock;
+		}
+		switch (cmd) {
+		case FBIO_WAITFORVSYNC:
+				/*
+				* Only consider the first CRTC.
+				*
+				* This ioctl is supposed to take the CRTC number as
+				* an argument, but in fbdev times, what that number
+				* was supposed to be was quite unclear, different
+				* drivers were passing that argument differently
+				* (some by reference, some by value), and most of the
+				* userspace applications were just hardcoding 0 as an
+				* argument.
+				*
+				* The first CRTC should be the integrated panel on
+				* most drivers, so this is the best choice we can
+				* make. If we're not smart enough here, one should
+				* just consider switch the userspace to KMS.
+				*/
+				mode_set = &fb_helper->crtc_info[0].mode_set;
+				crtc = mode_set->crtc;
+				/*
+				* Only wait for a vblank event if the CRTC is
+				* enabled, otherwise just don't do anythintg,
+				* not even report an error.
+				*/
+				ret = drm_crtc_vblank_get(crtc);
+				if (!ret) {
+						drm_crtc_wait_one_vblank(crtc);
+						drm_crtc_vblank_put(crtc);
+				}
+				ret = 0;
+				goto unlock;
+		default:
+				ret = -ENOTTY;
+		}
+unlock:
+		mutex_unlock(&dev->mode_config.mutex);
+		return ret;
+}
+EXPORT_SYMBOL(drm_fb_helper_ioctl);
+
+/**
  * drm_fb_helper_check_var - implementation for ->fb_check_var
  * @var: screeninfo to check
  * @info: fbdev registered by the helper
diff --git a/include/drm/drm_fb_helper.h b/include/drm/drm_fb_helper.h
index 87b090c..5be0007 100644
--- a/include/drm/drm_fb_helper.h
+++ b/include/drm/drm_fb_helper.h
@@ -196,6 +196,9 @@ void drm_fb_helper_set_suspend(struct drm_fb_helper *fb_helper, int state);
 
 int drm_fb_helper_setcmap(struct fb_cmap *cmap, struct fb_info *info);
 
+int drm_fb_helper_ioctl(struct fb_info *info, unsigned int cmd,
+							unsigned long arg);
+
 int drm_fb_helper_hotplug_event(struct drm_fb_helper *fb_helper);
 int drm_fb_helper_initial_config(struct drm_fb_helper *fb_helper, int bpp_sel);
 int drm_fb_helper_single_add_all_connectors(struct drm_fb_helper *fb_helper);
@@ -287,6 +290,12 @@ static inline int drm_fb_helper_setcmap(struct fb_cmap *cmap,
 	return 0;
 }
 
+static inline int drm_fb_helper_ioctl(struct fb_info *info, unsigned int cmd,
+							unsigned long arg)
+{
+		return 0;
+}
+
 static inline void drm_fb_helper_unlink_fbi(struct drm_fb_helper *fb_helper)
 {
 }
-- 
2.7.4

