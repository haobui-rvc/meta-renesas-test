From d2e3c8f496c40f5d1e5620e5be32727533086290 Mon Sep 17 00:00:00 2001
From: vietn <vietn@fsoft.com.vn>
Date: Sat, 16 Dec 2017 21:27:20 +0700
Subject: [PATCH 152/628] drm: cma-helper: Support double-buffering through
 fbdev panning

The fbdev API implements double-buffering through fbdev panning instead
of page flipping. This requires a frame buffer twice as big as the
output resolution.

Add a fb_size_mult argument to the drm_fbdev_cma_init() function. The
helper will allocate a frame buffer with a vertical size multiplied by
the fb_size_mult value.

Signed-off-by: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
(cherry picked from commit c8290f586cace292699ef6b50f66f013b09c3f1f)
Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
Signed-off-by: thongsyho <thong.ho.px@rvc.renesas.com>
Signed-off-by: vietn <vietn@fsoft.com.vn>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNV25@fsoft.com.vn>
---
 drivers/gpu/drm/drm_fb_cma_helper.c   | 10 +++++++---
 drivers/gpu/drm/rcar-du/rcar_du_kms.c |  2 +-
 include/drm/drm_fb_cma_helper.h       |  2 +-
 3 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/drm/drm_fb_cma_helper.c b/drivers/gpu/drm/drm_fb_cma_helper.c
index b7d5b84..7c0d613 100644
--- a/drivers/gpu/drm/drm_fb_cma_helper.c
+++ b/drivers/gpu/drm/drm_fb_cma_helper.c
@@ -33,6 +33,7 @@ struct drm_fb_cma {
 struct drm_fbdev_cma {
 	struct drm_fb_helper	fb_helper;
 	struct drm_fb_cma	*fb;
+	unsigned int		fb_size_mult;
 };
 
 static inline struct drm_fbdev_cma *to_fbdev_cma(struct drm_fb_helper *helper)
@@ -253,7 +254,7 @@ static int drm_fbdev_cma_create(struct drm_fb_helper *helper,
 	bytes_per_pixel = DIV_ROUND_UP(sizes->surface_bpp, 8);
 
 	mode_cmd.width = sizes->surface_width;
-	mode_cmd.height = sizes->surface_height;
+	mode_cmd.height = sizes->surface_height * fbdev_cma->fb_size_mult;
 	mode_cmd.pitches[0] = sizes->surface_width * bytes_per_pixel;
 	mode_cmd.pixel_format = drm_mode_legacy_fb_format(sizes->surface_bpp,
 		sizes->surface_depth);
@@ -284,7 +285,8 @@ static int drm_fbdev_cma_create(struct drm_fb_helper *helper,
 	fbi->fbops = &drm_fbdev_cma_ops;
 
 	drm_fb_helper_fill_fix(fbi, fb->pitches[0], fb->depth);
-	drm_fb_helper_fill_var(fbi, helper, sizes->fb_width, sizes->fb_height);
+	drm_fb_helper_fill_var(fbi, helper, sizes->surface_width,
+			sizes->surface_height);
 
 	offset = fbi->var.xoffset * bytes_per_pixel;
 	offset += fbi->var.yoffset * fb->pitches[0];
@@ -314,12 +316,13 @@ static const struct drm_fb_helper_funcs drm_fb_cma_helper_funcs = {
  * @preferred_bpp: Preferred bits per pixel for the device
  * @num_crtc: Number of CRTCs
  * @max_conn_count: Maximum number of connectors
+ * @fb_size_mult: Frame buffer height size multiplier
  *
  * Returns a newly allocated drm_fbdev_cma struct or a ERR_PTR.
  */
 struct drm_fbdev_cma *drm_fbdev_cma_init(struct drm_device *dev,
 	unsigned int preferred_bpp, unsigned int num_crtc,
-	unsigned int max_conn_count)
+	unsigned int max_conn_count, unsigned int fb_size_mult)
 {
 	struct drm_fbdev_cma *fbdev_cma;
 	struct drm_fb_helper *helper;
@@ -331,6 +334,7 @@ struct drm_fbdev_cma *drm_fbdev_cma_init(struct drm_device *dev,
 		return ERR_PTR(-ENOMEM);
 	}
 
+	fbdev_cma->fb_size_mult = fb_size_mult;
 	helper = &fbdev_cma->fb_helper;
 
 	drm_fb_helper_prepare(dev, helper, &drm_fb_cma_helper_funcs);
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_kms.c b/drivers/gpu/drm/rcar-du/rcar_du_kms.c
index aa52407..d009aa4 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_kms.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_kms.c
@@ -627,7 +627,7 @@ int rcar_du_modeset_init(struct rcar_du_device *rcdu)
 
 	if (dev->mode_config.num_connector) {
 		fbdev = drm_fbdev_cma_init(dev, 32, dev->mode_config.num_crtc,
-					   dev->mode_config.num_connector);
+					   dev->mode_config.num_connector, 1);
 		if (IS_ERR(fbdev))
 			return PTR_ERR(fbdev);
 
diff --git a/include/drm/drm_fb_cma_helper.h b/include/drm/drm_fb_cma_helper.h
index be62bd3..1382ea3 100644
--- a/include/drm/drm_fb_cma_helper.h
+++ b/include/drm/drm_fb_cma_helper.h
@@ -11,7 +11,7 @@ struct drm_mode_fb_cmd2;
 
 struct drm_fbdev_cma *drm_fbdev_cma_init(struct drm_device *dev,
 	unsigned int preferred_bpp, unsigned int num_crtc,
-	unsigned int max_conn_count);
+	unsigned int max_conn_count, unsigned int fb_size_mult);
 void drm_fbdev_cma_fini(struct drm_fbdev_cma *fbdev_cma);
 
 void drm_fbdev_cma_restore_mode(struct drm_fbdev_cma *fbdev_cma);
-- 
2.7.4

