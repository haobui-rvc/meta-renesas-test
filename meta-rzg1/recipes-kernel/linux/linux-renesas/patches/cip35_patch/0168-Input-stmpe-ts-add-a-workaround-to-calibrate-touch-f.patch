From 83295958d5cb1a09042d185488cbd3b5d081c522 Mon Sep 17 00:00:00 2001
From: Hung Dong <hung.dong.xd@rvc.renesas.com>
Date: Thu, 2 Nov 2017 11:19:40 +0700
Subject: [PATCH 168/628] Input: stmpe-ts - add a workaround to calibrate touch
 for iWave iwg22m board

Signed-off-by: Hung Dong <hung.dong.xd@rvc.renesas.com>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNV25@fsoft.com.vn>
Signed-off-by: vietn <vietn@fsoft.com.vn>
---
 drivers/input/touchscreen/Kconfig    | 11 +++++++++++
 drivers/input/touchscreen/stmpe-ts.c | 22 +++++++++++++++++++++-
 2 files changed, 32 insertions(+), 1 deletion(-)

diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index ae33da7..3f1c987 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -1021,6 +1021,17 @@ config TOUCHSCREEN_STMPE
 	  To compile this driver as a module, choose M here: the
 	  module will be called stmpe-ts.
 
+config TOUCHSCREEN_STMPE_CALIBRATION_WORKAROUND
+	tristate "STMPE touchscreen calibration"
+	depends on TOUCHSCREEN_STMPE
+	help
+	  Say Y here if you want support for iWave iwg22m board.
+
+	  This enables a workaround for STMPE touchscreen driver
+	  on iWave iwg22m board, which calibrate X,Y touch positions.
+
+	  If unsure, or your board is not iWave iwg22m, say N.
+
 config TOUCHSCREEN_SUN4I
 	tristate "Allwinner sun4i resistive touchscreen controller support"
 	depends on ARCH_SUNXI || COMPILE_TEST
diff --git a/drivers/input/touchscreen/stmpe-ts.c b/drivers/input/touchscreen/stmpe-ts.c
index e414d43..332cd02 100644
--- a/drivers/input/touchscreen/stmpe-ts.c
+++ b/drivers/input/touchscreen/stmpe-ts.c
@@ -63,6 +63,11 @@
 #define STMPE_TS_NAME			"stmpe-ts"
 #define XY_MASK				0xfff
 
+#ifdef CONFIG_TOUCHSCREEN_STMPE_CALIBRATION_WORKAROUND
+#define STMPE_MIN_Y                    120
+#define STMPE_MAX_Y                   4210
+#endif
+
 struct stmpe_touch {
 	struct stmpe *stmpe;
 	struct input_dev *idev;
@@ -123,6 +128,17 @@ static void stmpe_work(struct work_struct *work)
 	input_sync(ts->idev);
 }
 
+#ifdef CONFIG_TOUCHSCREEN_STMPE_CALIBRATION_WORKAROUND
+static void calibration_pointer(int *x_orig, int *y_orig)
+{
+	int  y;
+
+	/*( 100 / 93 ) is the scalling factor*/
+	y = (*y_orig - STMPE_MIN_Y) * 100/93;
+	*y_orig = STMPE_MAX_Y - y;
+}
+#endif
+
 static irqreturn_t stmpe_ts_handler(int irq, void *data)
 {
 	u8 data_set[4];
@@ -150,13 +166,17 @@ static irqreturn_t stmpe_ts_handler(int irq, void *data)
 	y = ((data_set[1] & 0xf) << 8) | data_set[2];
 	z = data_set[3];
 
+#ifdef CONFIG_TOUCHSCREEN_STMPE_CALIBRATION_WORKAROUND
+	calibration_pointer(&x, &y);
+#endif
+
 	input_report_abs(ts->idev, ABS_X, x);
 	input_report_abs(ts->idev, ABS_Y, y);
 	input_report_abs(ts->idev, ABS_PRESSURE, z);
 	input_report_key(ts->idev, BTN_TOUCH, 1);
 	input_sync(ts->idev);
 
-       /* flush the FIFO after we have read out our values. */
+	/* flush the FIFO after we have read out our values. */
 	__stmpe_reset_fifo(ts->stmpe);
 
 	/* reenable the tsc */
-- 
2.7.4

