From cbad82463db565ddede41ee2be4e60dc234bcc36 Mon Sep 17 00:00:00 2001
From: Binh Nguyen <binh.nguyen.uw@rvc.renesas.com>
Date: Mon, 13 Nov 2017 14:35:20 +0700
Subject: [PATCH 184/628] phy: rcar_gen2: Support USB OTG (host/device role)

Instead of statically selecting the PHY connection to either the
USBHS (Function) or PCI0 (Host) IP blocks, this change allows the
dts to specifiy gpio pins for the vbus and id signals. Additional
gpio pins are used to control power to an external OTG device and
an override to turn vbus on/off.

This has been tested on a r8a7743 based iwage G1M/N board without
MAX3355 device to supply vbus power when needed.

Note:
	The R-Car USB PHY only allows this Host/Function switching on channel 0.
	This patch is supported only iwage G1M/N board.

Refer work from Phil Edworthy (https://patchwork.kernel.org/patch/6708141/)

Signed-off-by: thongsyho <thong.ho.px@rvc.renesas.com>
Signed-off-by: Binh Nguyen <binh.nguyen.uw@rvc.renesas.com>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNV25@fsoft.com.vn>
Signed-off-by: vietn <vietn@fsoft.com.vn>
---
 drivers/phy/phy-rcar-gen2.c | 408 +++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 387 insertions(+), 21 deletions(-)

diff --git a/drivers/phy/phy-rcar-gen2.c b/drivers/phy/phy-rcar-gen2.c
index 40db1c4..5d5f842 100644
--- a/drivers/phy/phy-rcar-gen2.c
+++ b/drivers/phy/phy-rcar-gen2.c
@@ -12,11 +12,16 @@
 #include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/io.h>
+#include <linux/interrupt.h>
 #include <linux/module.h>
 #include <linux/of.h>
+#include <linux/of_gpio.h>
 #include <linux/phy/phy.h>
 #include <linux/platform_device.h>
 #include <linux/spinlock.h>
+#include <linux/usb/gadget.h>
+#include <linux/usb/otg.h>
+#include <linux/workqueue.h>
 #include <linux/atomic.h>
 
 #define USBHS_LPSTS			0x02
@@ -57,6 +62,23 @@ struct rcar_gen2_channel {
 	struct rcar_gen2_phy phys[PHYS_PER_CHANNEL];
 	int selected_phy;
 	u32 select_mask;
+	/* external power enable pin */
+	int gpio_pwr;
+
+	/* Host/Function switching */
+	struct delayed_work	work;
+	int use_otg;
+	int gpio_vbus;
+	int gpio_id;
+	int gpio_vbus_pwr;
+	int irq_id;
+	int irq_vbus;
+	struct delayed_work     work_vbus;
+	struct delayed_work     work_id;
+	struct workqueue_struct *work_queue;
+	struct usb_phy usbphy;
+	struct usb_otg *otg;
+	struct platform_device *pdev;
 };
 
 struct rcar_gen2_phy_driver {
@@ -67,34 +89,59 @@ struct rcar_gen2_phy_driver {
 	struct rcar_gen2_channel *channels;
 };
 
-static int rcar_gen2_phy_init(struct phy *p)
+static void rcar_gen2_phy_switch(struct rcar_gen2_channel *channel,
+	u32 select_value)
 {
-	struct rcar_gen2_phy *phy = phy_get_drvdata(p);
-	struct rcar_gen2_channel *channel = phy->channel;
 	struct rcar_gen2_phy_driver *drv = channel->drv;
 	unsigned long flags;
 	u32 ugctrl2;
 
-	/*
-	 * Try to acquire exclusive access to PHY.  The first driver calling
-	 * phy_init()  on a given channel wins, and all attempts  to use another
-	 * PHY on this channel will fail until phy_exit() is called by the first
-	 * driver.   Achieving this with cmpxcgh() should be SMP-safe.
-	 */
-	if (cmpxchg(&channel->selected_phy, -1, phy->number) != -1)
-		return -EBUSY;
-
-	clk_prepare_enable(drv->clk);
-
 	spin_lock_irqsave(&drv->lock, flags);
 	ugctrl2 = readl(drv->base + USBHS_UGCTRL2);
 	ugctrl2 &= ~channel->select_mask;
-	ugctrl2 |= phy->select_value;
+	ugctrl2 |= select_value;
 	writel(ugctrl2, drv->base + USBHS_UGCTRL2);
 	spin_unlock_irqrestore(&drv->lock, flags);
 	return 0;
 }
 
+static int rcar_gen2_phy_init(struct phy *p)
+{
+	struct rcar_gen2_phy *phy = phy_get_drvdata(p);
+	struct rcar_gen2_channel *channel = phy->channel;
+	struct rcar_gen2_phy_driver *drv = channel->drv;
+#ifdef CONFIG_USB_OTG
+	if (!channel->use_otg) {
+		/*
+		 * Static Host/Function role.
+		 * Try to acquire exclusive access to PHY. The first driver
+		 * calling phy_init() on a given channel wins, and all attempts
+		 * to use another PHY on this channel will fail until
+		 * phy_exit() is called by the first driver. Achieving this
+		 * with cmpxcgh() should be SMP-safe.
+		 */
+		if (cmpxchg(&channel->selected_phy, -1, phy->number) != -1)
+			return -EBUSY;
+
+		clk_prepare_enable(drv->clk);
+		rcar_gen2_phy_switch(channel, phy->select_value);
+	} else {
+		/*
+		 * Using Host/Function switching, so schedule work to determine
+		 * which role to use.
+		 */
+		clk_prepare_enable(drv->clk);
+		schedule_delayed_work(&channel->work_vbus, 100);
+	}
+#else
+	if (cmpxchg(&channel->selected_phy, -1, phy->number) != -1)
+		return -EBUSY;
+
+	clk_prepare_enable(drv->clk);
+	rcar_gen2_phy_switch(channel, phy->select_value);
+#endif
+}
+
 static int rcar_gen2_phy_exit(struct phy *p)
 {
 	struct rcar_gen2_phy *phy = phy_get_drvdata(p);
@@ -116,9 +163,11 @@ static int rcar_gen2_phy_power_on(struct phy *p)
 	u32 value;
 	int err = 0, i;
 
-	/* Skip if it's not USBHS */
-	if (phy->select_value != USBHS_UGCTRL2_USB0SEL_HS_USB)
-		return 0;
+#ifdef CONFIG_USB_OTG
+	/* Optional external power pin */
+	if (gpio_is_valid(phy->channel->gpio_pwr))
+		gpio_direction_output(phy->channel->gpio_pwr, 1);
+#endif
 
 	spin_lock_irqsave(&drv->lock, flags);
 
@@ -159,9 +208,11 @@ static int rcar_gen2_phy_power_off(struct phy *p)
 	unsigned long flags;
 	u32 value;
 
-	/* Skip if it's not USBHS */
-	if (phy->select_value != USBHS_UGCTRL2_USB0SEL_HS_USB)
-		return 0;
+#ifdef CONFIG_USB_OTG
+	/* External power pin */
+	if (gpio_is_valid(phy->channel->gpio_pwr))
+		gpio_direction_output(phy->channel->gpio_pwr, 0);
+#endif
 
 	spin_lock_irqsave(&drv->lock, flags);
 
@@ -233,6 +284,155 @@ static const u32 select_value[][PHYS_PER_CHANNEL] = {
 	[2]	= { USBHS_UGCTRL2_USB2SEL_PCI, USBHS_UGCTRL2_USB2SEL_USB30 },
 };
 
+#ifdef CONFIG_USB_OTG
+#define VBUS_IRQ_FLAGS \
+	(IRQF_SHARED | IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING)
+
+static void gpio_id_work(struct work_struct *work)
+{
+	struct rcar_gen2_channel *channel = container_of(work,
+					struct rcar_gen2_channel, work_id.work);
+	struct usb_phy *usbphy = &channel->usbphy;
+	int status, vbus, id;
+
+	id = !!gpio_get_value(channel->gpio_id);
+	/* Switch the PHY over */
+	if (!id)
+		rcar_gen2_phy_switch(channel, USBHS_UGCTRL2_USB0SEL_PCI | USBHS_UGCTRL2_USB2SEL_USB30);
+
+	/* If VBUS is powered and we are not the initial Host, turn off VBUS */
+	if (gpio_is_valid(channel->gpio_vbus_pwr))
+		gpio_direction_output(channel->gpio_vbus_pwr, !(id));
+}
+
+static void gpio_vbus_work(struct work_struct *work)
+{
+	struct rcar_gen2_channel *channel = container_of(work,
+									struct rcar_gen2_channel, work_vbus.work);
+	struct usb_phy *usbphy = &channel->usbphy;
+	int status, vbus, id;
+
+	vbus = !!gpio_get_value(channel->gpio_vbus);
+	id = !!gpio_get_value(channel->gpio_id);
+
+	if (gpio_is_valid(channel->gpio_vbus_pwr))
+		gpio_request_one(channel->gpio_vbus_pwr, GPIOF_DIR_OUT, NULL);
+	/* Switch the PHY over */
+	if (id)
+		rcar_gen2_phy_switch(channel, USBHS_UGCTRL2_USB0SEL_HS_USB | USBHS_UGCTRL2_USB2SEL_USB30);
+	else
+		rcar_gen2_phy_switch(channel, USBHS_UGCTRL2_USB0SEL_PCI | USBHS_UGCTRL2_USB2SEL_USB30);
+
+	if (!channel->otg->gadget)
+		return;
+
+	/* Function handling: vbus=1 when initially plugged into a Host */
+	if (vbus) {
+		status = USB_EVENT_VBUS;
+		usbphy->otg->state = OTG_STATE_B_PERIPHERAL;
+		usbphy->last_event = status;
+		usb_gadget_vbus_connect(usbphy->otg->gadget);
+
+		atomic_notifier_call_chain(&usbphy->notifier,
+							status, usbphy->otg->gadget);
+	} else {
+		usb_gadget_vbus_disconnect(usbphy->otg->gadget);
+		status = USB_EVENT_NONE;
+		usbphy->otg->state = OTG_STATE_B_IDLE;
+		usbphy->last_event = status;
+
+		atomic_notifier_call_chain(&usbphy->notifier,
+						status, usbphy->otg->gadget);
+	}
+}
+
+/* VBUS change IRQ handler */
+static irqreturn_t gpio_vbus_irq(int irq, void *data)
+{
+	struct rcar_gen2_channel *channel = data;
+	struct usb_otg *otg = channel->otg;
+	int id;
+
+	id = gpio_get_value(channel->gpio_id);
+	if (irq == channel->irq_vbus) {
+		if (otg->gadget) {
+			queue_delayed_work(channel->work_queue,
+			&channel->work_vbus, msecs_to_jiffies(100));
+			}
+		} else {
+		queue_delayed_work(channel->work_queue,
+		&channel->work_id, msecs_to_jiffies(100));
+		}
+	return IRQ_HANDLED;
+}
+
+static int probe_otg(struct platform_device *pdev,
+	struct rcar_gen2_phy_driver *drv)
+{
+	struct device *dev = &pdev->dev;
+	struct rcar_gen2_channel *ch = drv->channels;
+	int irq;
+	int ret;
+	/* GPIOs for Host/Fn switching */
+	ch->gpio_id = of_get_named_gpio_flags(dev->of_node,
+				"renesas,id-gpio", 0, NULL);
+	ch->gpio_vbus = of_get_named_gpio_flags(dev->of_node,
+				"renesas,vbus-gpio", 0, NULL);
+	/* Need valid ID and VBUS gpios for Host/Fn switching */
+	if (gpio_is_valid(ch->gpio_id) && gpio_is_valid(ch->gpio_vbus)) {
+		ch->use_otg = 1;
+		/* GPIO for ID input */
+		ret = devm_gpio_request_one(dev, ch->gpio_id, GPIOF_IN, "id");
+		if (ret)
+			return ret;
+		/* GPIO for VBUS input */
+		ret = devm_gpio_request_one(dev, ch->gpio_vbus, GPIOF_IN, "vbus");
+		if (ret)
+			return ret;
+
+		/* Optional GPIO for VBUS power */
+		ch->gpio_vbus_pwr = of_get_named_gpio_flags(dev->of_node,
+						"renesas,vbus-pwr-gpio", 0, NULL);
+
+		if (gpio_is_valid(ch->gpio_vbus_pwr)) {
+			ret = devm_gpio_request_one(dev, ch->gpio_vbus_pwr,
+					GPIOF_OUT_INIT_LOW, "vbus-pwr");
+			if (ret)
+				return ret;
+		}
+		return 0;
+	} else if (gpio_is_valid(ch->gpio_id)) {
+		dev_err(dev, "Failed to get VBUS gpio\n");
+		return ch->gpio_vbus;
+	} else if (gpio_is_valid(ch->gpio_vbus)) {
+		dev_err(dev, "Failed to get ID gpio\n");
+		return ch->gpio_id;
+	}
+
+	return -EPROBE_DEFER;
+}
+
+/* bind/unbind the peripheral controller */
+static int rcar_gen2_usb_set_peripheral(struct usb_otg *otg,
+					struct usb_gadget *gadget)
+{
+	struct rcar_gen2_channel *channel;
+
+	channel = container_of(otg->usb_phy, struct rcar_gen2_channel, usbphy);
+	if (!gadget) {
+		usb_gadget_vbus_disconnect(otg->gadget);
+		otg->state = OTG_STATE_UNDEFINED;
+		return -EPROBE_DEFER;
+	}
+	otg->gadget = gadget;
+
+	/* initialize connection state */
+	gpio_vbus_irq(channel->irq_vbus, channel);
+
+	return 0;
+}
+#endif
+
 static int rcar_gen2_phy_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -244,6 +444,14 @@ static int rcar_gen2_phy_probe(struct platform_device *pdev)
 	struct clk *clk;
 	int i = 0;
 
+#ifdef CONFIG_USB_OTG
+	struct usb_otg *otg;
+	struct workqueue_struct *work_queue;
+	int irq;
+	int err;
+	int retval;
+#endif
+
 	if (!dev->of_node) {
 		dev_err(dev,
 			"This driver is required to be instantiated from device tree\n");
@@ -277,6 +485,129 @@ static int rcar_gen2_phy_probe(struct platform_device *pdev)
 	if (!drv->channels)
 		return -ENOMEM;
 
+#ifdef CONFIG_USB_OTG
+	drv->channels->pdev = pdev;
+
+	/* USB0 optional GPIO power pin for external devices */
+	drv->channels->gpio_pwr = of_get_named_gpio_flags(dev->of_node,
+						"renesas,pwr-gpio", 0, NULL);
+	if (drv->channels->gpio_pwr == -EPROBE_DEFER)
+		return -EPROBE_DEFER;
+
+	if (gpio_is_valid(drv->channels->gpio_pwr)) {
+		err = devm_gpio_request(dev, drv->channels->gpio_pwr, "pwr");
+		if (err)
+			return err;
+	}
+
+	/*
+	* The PHY connected to channel 0 can be used to steer signals to the
+	* USB Host IP that stils behind a PCI bridge (pci0), or the USB Func
+	* IP (hsusb). We can dynamically switch this based on VBUS and ID
+	* signals connected to gpios, to get something approaching OTG.
+	*/
+
+	otg = devm_kzalloc(dev, sizeof(*otg), GFP_KERNEL);
+	if (!otg)
+			return -ENOMEM;
+
+	drv->channels->usbphy.dev    	= dev;
+	drv->channels->usbphy.otg    	= otg;
+	drv->channels->usbphy.type	= USB_PHY_TYPE_UNDEFINED;
+
+	otg->usb_phy            = &drv->channels->usbphy;
+	otg->state              = OTG_STATE_UNDEFINED;
+	otg->set_peripheral     = rcar_gen2_usb_set_peripheral;
+
+	drv->channels->otg      = otg;
+
+	/* USB0 Host/Function switching info */
+	err = probe_otg(pdev, drv);
+	if (err)
+		return err;
+
+	if (drv->channels->use_otg) {
+		if (gpio_is_valid(drv->channels->gpio_id)) {
+			irq = gpio_to_irq(drv->channels->gpio_id);
+			if (irq < 0) {
+				dev_err(dev,
+					"Unable to get irq number for GPIO ID %d, error %d\n",
+					drv->channels->gpio_id, irq);
+				return irq;
+			}
+			drv->channels->irq_id = irq;
+
+			INIT_DELAYED_WORK(&drv->channels->work_id, gpio_id_work);
+			work_queue = create_singlethread_workqueue(dev_name(&pdev->dev));
+			if (!work_queue) {
+				dev_err(dev, "failed to create workqueue\n");
+				return -ENOMEM;
+			}
+			drv->channels->work_queue = work_queue;
+
+			retval = devm_request_irq(dev, irq,
+						gpio_vbus_irq,
+						IRQF_TRIGGER_RISING |
+						IRQF_TRIGGER_FALLING,
+						pdev->name, drv->channels);
+
+			if (retval) {
+				dev_err(dev, "can't request irq %i, err: %d\n",
+					irq, retval);
+				goto err_irq;
+			}
+
+			if (of_property_read_bool(np, "renesas,wakeup"))
+				device_init_wakeup(&pdev->dev, 1);
+			else
+				device_init_wakeup(&pdev->dev, 0);
+		}
+
+		if (gpio_is_valid(drv->channels->gpio_vbus)) {
+			irq = gpio_to_irq(drv->channels->gpio_vbus);
+			if (irq < 0) {
+				dev_err(dev,
+					"Unable to get irq number for GPIO ID %d, error %d\n",
+						drv->channels->gpio_vbus, irq);
+				return irq;
+			}
+			drv->channels->irq_vbus = irq;
+
+			INIT_DELAYED_WORK(&drv->channels->work_vbus, gpio_vbus_work);
+			work_queue = create_singlethread_workqueue(dev_name(&pdev->dev));
+			if (!work_queue) {
+				dev_err(dev, "failed to create workqueue\n");
+				return -ENOMEM;
+			}
+			drv->channels->work_queue = work_queue;
+
+			retval = devm_request_irq(dev, irq,
+									gpio_vbus_irq,
+									IRQF_TRIGGER_RISING |
+									IRQF_TRIGGER_FALLING,
+									pdev->name, drv->channels);
+
+			if (retval) {
+				dev_err(dev, "can't request irq %i, err: %d\n",
+					irq, retval);
+				goto err_irq;
+			}
+
+			if (of_property_read_bool(np, "renesas,wakeup"))
+				device_init_wakeup(&pdev->dev, 1);
+			else
+				device_init_wakeup(&pdev->dev, 0);
+		}
+	}
+
+	retval = usb_add_phy_dev(&drv->channels->usbphy);
+	if (retval < 0) {
+		dev_err(dev, "Failed to add USB phy\n");
+		goto err_otg;
+	}
+	platform_set_drvdata(pdev, drv->channels);
+#endif
+
 	for_each_child_of_node(dev->of_node, np) {
 		struct rcar_gen2_channel *channel = drv->channels + i;
 		u32 channel_num;
@@ -286,6 +617,11 @@ static int rcar_gen2_phy_probe(struct platform_device *pdev)
 		channel->drv = drv;
 		channel->selected_phy = -1;
 
+#ifdef CONFIG_USB_OTG
+		if (i != 0)
+			channel->gpio_pwr = -ENOENT;
+#endif
+
 		error = of_property_read_u32(np, "reg", &channel_num);
 		if (error || channel_num > 2) {
 			dev_err(dev, "Invalid \"reg\" property\n");
@@ -320,7 +656,37 @@ static int rcar_gen2_phy_probe(struct platform_device *pdev)
 
 	dev_set_drvdata(dev, drv);
 
+#ifdef CONFIG_USB_OTG
+	/*
+	* If we already have something plugged into USB0, we won't get an edge
+	* on VBUS, so we have to manually schedule work to look at the VBUS
+	* and ID signals.
+	*/
+	if (drv->channels->use_otg) {
+		schedule_delayed_work(&drv->channels->work_vbus, msecs_to_jiffies(100));
+		schedule_delayed_work(&drv->channels->work_id, msecs_to_jiffies(100));
+	}
+#endif
+
 	return 0;
+
+#ifdef CONFIG_USB_OTG
+err_otg:
+	if (gpio_is_valid(drv->channels->gpio_id) || gpio_is_valid(drv->channels->gpio_vbus))
+		device_init_wakeup(&pdev->dev, 0);
+err_irq:
+	if (gpio_is_valid(drv->channels->gpio_id) || gpio_is_valid(drv->channels->gpio_vbus)) {
+		if (gpio_is_valid(drv->channels->gpio_id))
+			cancel_delayed_work_sync(&drv->channels->work_id);
+
+		if (gpio_is_valid(drv->channels->gpio_vbus))
+			cancel_delayed_work_sync(&drv->channels->work_vbus);
+
+		destroy_workqueue(drv->channels->work_queue);
+	}
+
+	return retval;
+#endif
 }
 
 static struct platform_driver rcar_gen2_phy_driver = {
-- 
2.7.4

