From 7285ad9a62a6b6bdeb9ed4d0375399c736430975 Mon Sep 17 00:00:00 2001
From: "Nguyen Van Tu [FGA.AIS]" <TuNV16@fsoft.com.vn>
Date: Wed, 14 Nov 2018 11:50:42 +0700
Subject: [PATCH 041/628] Fix adv7511 drm driver Fixes which makes driver work
 with GreenHouse monitor: 1. Allow interrupts 2. Use power functions instead
 of copy it's code 3. Fix encoder_detect function

Signed-off-by: vietn <vietn@fsoft.com.vn>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNV25@fsoft.com.vn>
Signed-off-by: Nguyen Van Tu [FGA.AIS] <TuNV16@fsoft.com.vn>
---
 drivers/gpu/drm/i2c/adv7511.c | 113 ++++++++++++++++++++++++++++++------------
 1 file changed, 80 insertions(+), 33 deletions(-)

diff --git a/drivers/gpu/drm/i2c/adv7511.c b/drivers/gpu/drm/i2c/adv7511.c
index 4300e27..bcac24a 100644
--- a/drivers/gpu/drm/i2c/adv7511.c
+++ b/drivers/gpu/drm/i2c/adv7511.c
@@ -20,6 +20,8 @@
 
 #include "adv7511.h"
 
+#define MAX_EDID_ITERATIONS		2
+
 struct adv7511 {
 	struct i2c_client *i2c_main;
 	struct i2c_client *i2c_edid;
@@ -33,7 +35,7 @@ struct adv7511 {
 
 	unsigned int current_edid_segment;
 	uint8_t edid_buf[256];
-	bool edid_read;
+	bool edid_read, read_error;
 
 	wait_queue_head_t wq;
 	struct work_struct hpd_work;
@@ -414,6 +416,13 @@ static void adv7511_power_off(struct adv7511 *adv7511)
 	adv7511->powered = false;
 }
 
+static void adv7511_reset(struct adv7511 *adv7511)
+{
+	adv7511_power_off(adv7511);
+	msleep(5);
+	adv7511_power_on(adv7511);
+}
+
 /* -----------------------------------------------------------------------------
  * Interrupt and hotplug detection
  */
@@ -509,27 +518,55 @@ static irqreturn_t adv7511_irq_handler(int irq, void *devid)
 /* -----------------------------------------------------------------------------
  * EDID retrieval
  */
+static void adv7511_start_read_edid_block(struct adv7511 *adv7511, unsigned int block)
+{
+	adv7511->edid_read = false;
+	adv7511->read_error = false;
+	regmap_write(adv7511->regmap, ADV7511_REG_EDID_SEGMENT,
+				     block);
+}
 
-static int adv7511_wait_for_edid(struct adv7511 *adv7511, int timeout)
+static int adv7511_wait_for_edid(struct adv7511 *adv7511, int timeout,
+					unsigned int block, bool restart)
 {
 	int ret;
+	int i;
+
+	for (i = 0; i < MAX_EDID_ITERATIONS; i++) {
+		if (restart)
+			adv7511_start_read_edid_block(adv7511, block);
+
+		restart = true;
+
+		if (adv7511->i2c_main->irq) {
+			ret = wait_event_interruptible_timeout(adv7511->wq,
+					(adv7511->edid_read || adv7511->read_error), msecs_to_jiffies(timeout));
+
+			if (ret == 0)
+				return -EAGAIN;
 
-	if (adv7511->i2c_main->irq) {
-		ret = wait_event_interruptible_timeout(adv7511->wq,
-				adv7511->edid_read, msecs_to_jiffies(timeout));
-	} else {
-		for (; timeout > 0; timeout -= 25) {
-			ret = adv7511_irq_process(adv7511, false);
 			if (ret < 0)
-				break;
+				return -EIO;
+		} else {
+			for (; timeout > 0; timeout -= 25) {
+				ret = adv7511_irq_process(adv7511, false);
+				if (ret < 0)
+					break;
 
-			if (adv7511->edid_read)
-				break;
+				if (adv7511->edid_read || adv7511->read_error)
+					break;
 
-			msleep(25);
+				msleep(25);
+			}
 		}
-	}
 
+		if (adv7511->read_error)
+			adv7511_reset(adv7511);
+
+
+		if (adv7511->edid_read)
+			break;
+	}
 	return adv7511->edid_read ? 0 : -EIO;
 }
 
@@ -546,18 +583,24 @@ static int adv7511_get_edid_block(void *data, u8 *buf, unsigned int block,
 		return -EINVAL;
 
 	if (adv7511->current_edid_segment != block / 2) {
-		unsigned int status;
+		unsigned int status, blk;
 
 		ret = regmap_read(adv7511->regmap, ADV7511_REG_DDC_STATUS,
 				  &status);
 		if (ret < 0)
 			return ret;
 
-		if (status != 2) {
-			adv7511->edid_read = false;
-			regmap_write(adv7511->regmap, ADV7511_REG_EDID_SEGMENT,
-				     block);
-			ret = adv7511_wait_for_edid(adv7511, 200);
+		if (!(status & 0x0f))
+			return -EIO;
+
+		/* timeout situation */
+		ret = regmap_read(adv7511->regmap, ADV7511_REG_EDID_SEGMENT,
+				  &blk);
+		if (ret < 0)
+			return ret;
+
+		if (status != 2 || blk != block / 2) {
+			ret = adv7511_wait_for_edid(adv7511, 200, block, blk != block / 2);
 			if (ret < 0)
 				return ret;
 		}
@@ -610,29 +653,30 @@ static int adv7511_get_modes(struct drm_encoder *encoder,
 	struct adv7511 *adv7511 = encoder_to_adv7511(encoder);
 	struct edid *edid;
 	unsigned int count;
+	bool powered = adv7511->powered;
 
 	/* Reading the EDID only works if the device is powered */
-	if (!adv7511->powered) {
+	if (!powered) {
+		/*regmap_write(adv7511->regmap, ADV7511_REG_INT(0),
+			     ADV7511_INT0_EDID_READY);
+		regmap_write(adv7511->regmap, ADV7511_REG_INT(1),
+			     ADV7511_INT1_DDC_ERROR);
 		regmap_update_bits(adv7511->regmap, ADV7511_REG_POWER,
 				   ADV7511_POWER_POWER_DOWN, 0);
-		if (adv7511->i2c_main->irq) {
-			regmap_write(adv7511->regmap, ADV7511_REG_INT_ENABLE(0),
-				     ADV7511_INT0_EDID_READY);
-			regmap_write(adv7511->regmap, ADV7511_REG_INT_ENABLE(1),
-				     ADV7511_INT1_DDC_ERROR);
-		}
-		adv7511->current_edid_segment = -1;
-		/* Reset the EDID_I2C_ADDR register as it might be cleared */
-		regmap_write(adv7511->regmap, ADV7511_REG_EDID_I2C_ADDR,
-				edid_i2c_addr);
+		adv7511->current_edid_segment = -1;*/
+
+		/* This call seems more correct */
+		adv7511_power_on(adv7511);
 	}
 
 	edid = drm_do_get_edid(connector, adv7511_get_edid_block, adv7511);
 
-	if (!adv7511->powered)
-		regmap_update_bits(adv7511->regmap, ADV7511_REG_POWER,
+	if (!powered) {
+		/*regmap_update_bits(adv7511->regmap, ADV7511_REG_POWER,
 				   ADV7511_POWER_POWER_DOWN,
-				   ADV7511_POWER_POWER_DOWN);
+				   ADV7511_POWER_POWER_DOWN);*/
+		adv7511_power_off(adv7511);
+	}
 
 	kfree(adv7511->edid);
 	adv7511->edid = edid;
@@ -686,8 +730,11 @@ adv7511_encoder_detect(struct drm_encoder *encoder,
 		regcache_mark_dirty(adv7511->regmap);
 		adv7511_power_on(adv7511);
 		adv7511_get_modes(encoder, connector);
+		/* it seems starnge returning disconnect whet it is connected */
+		#if 0
 		if (adv7511->status == connector_status_connected)
 			status = connector_status_disconnected;
+		#endif
 	} else {
 		/* Renable HDP sensing */
 		regmap_update_bits(adv7511->regmap, ADV7511_REG_POWER2,
-- 
2.7.4

