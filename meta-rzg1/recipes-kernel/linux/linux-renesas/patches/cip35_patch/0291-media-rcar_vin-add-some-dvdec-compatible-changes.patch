From 9b0b2147069926124f109b360130f7a40e594c1d Mon Sep 17 00:00:00 2001
From: thongsyho <thong.ho.px@rvc.renesas.com>
Date: Wed, 14 Nov 2018 15:06:20 +0700
Subject: [PATCH 291/628] media: rcar_vin: add some dvdec compatible changes

Signed-off-by: nhannguyen <nhan.nguyen.yb@renesas.com>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNV25@fsoft.com.vn>
Signed-off-by: vietn <vietn@fsoft.com.vn>
Signed-off-by: thongsyho <thong.ho.px@rvc.renesas.com>
---
 drivers/media/platform/soc_camera/rcar_vin.c | 152 ++++++++++++++++++---------
 1 file changed, 105 insertions(+), 47 deletions(-)

diff --git a/drivers/media/platform/soc_camera/rcar_vin.c b/drivers/media/platform/soc_camera/rcar_vin.c
index 74e7c6e..d5ddca2 100644
--- a/drivers/media/platform/soc_camera/rcar_vin.c
+++ b/drivers/media/platform/soc_camera/rcar_vin.c
@@ -98,6 +98,7 @@
 #define VNMC_INF_YUV10_BT656	(2 << 16)
 #define VNMC_INF_YUV10_BT601	(3 << 16)
 #define VNMC_INF_YUV16		(5 << 16)
+#define VNMC_INF_YUV20         ((5 << 16) | (2 << 12))
 #define VNMC_INF_RGB888		(6 << 16)
 #define VNMC_VUP		(1 << 10)
 #define VNMC_IM_ODD		(0 << 3)
@@ -149,6 +150,7 @@ enum chip_id {
 	RCAR_H1,
 	RCAR_M1,
 	RCAR_E1,
+	RZ_G1C,
 };
 
 struct vin_coeff {
@@ -637,6 +639,11 @@ static int rcar_vin_setup(struct rcar_vin_priv *priv)
 		vnmc |= VNMC_INF_YUV16;
 		input_is_yuv = true;
 		break;
+	case MEDIA_BUS_FMT_YUYV10_1X20:
+		/* BT.601/BT.709/BT.1358 20bit YCbCr422 */
+		vnmc |= VNMC_INF_YUV20;
+		input_is_yuv = true;
+		break;
 	case MEDIA_BUS_FMT_YUYV8_2X8:
 		/* BT.656 8bit YCbCr422 or BT.601 8bit YCbCr422 */
 		vnmc |= priv->pdata_flags & RCAR_VIN_BT656 ?
@@ -1088,6 +1095,9 @@ static int rcar_vin_set_rect(struct soc_camera_device *icd)
 	struct v4l2_rect *cam_subrect = &cam->subrect;
 	u32 value = 0;
 
+	if (priv->chip == RZ_G1C)
+		cam->vin_top = 16;
+
 	dev_dbg(icd->parent, "Crop %ux%u@%u:%u\n",
 		icd->user_width, icd->user_height, cam->vin_left, cam->vin_top);
 
@@ -1104,53 +1114,81 @@ static int rcar_vin_set_rect(struct soc_camera_device *icd)
 		cam_subrect->width, cam_subrect->height,
 		cam_subrect->left, cam_subrect->top);
 
-	/* Set Start/End Pixel/Line Pre-Clip */
-	iowrite32(left_offset << dsize, priv->base + VNSPPRC_REG);
-	iowrite32((left_offset + cam_subrect->width - 1) << dsize,
-		  priv->base + VNEPPRC_REG);
+	if (priv->chip == RZ_G1C) {
+		/* Need to set same size with the DVDEC output */
+		iowrite32(cam_subrect->top, priv->base + VNSLPRC_REG);
+		iowrite32(cam_subrect->top + cam_subrect->height - 1,
+				priv->base + VNELPRC_REG);
+		iowrite32(cam_subrect->left, priv->base + VNSPPRC_REG);
+		iowrite32(cam_subrect->left + cam_subrect->width - 1,
+				priv->base + VNEPPRC_REG);
+		/* Set scaling coefficient */
+		value = 0;
+		if ((cam_subrect->height * 2) != cam->out_height)
+				value = (4096 * (cam_subrect->height * 2))
+						/ cam->out_height;
+		iowrite32(value, priv->base + VNYS_REG);
+		value = 0;
+		if (cam_subrect->width != cam->out_width)
+				value = (4096 * cam_subrect->width) / cam->out_width;
+		/* Horizontal enlargement is up to double size */
+		if (0 < value  && value < 0x0800)
+				value = 0x0800;
+		iowrite32(value, priv->base + VNXS_REG);
+		/* Horizontal enlargement is carried out */
+		/* by scaling down from double size */
+		if (value < 0x1000)
+				value *= 2;
+		set_coeff(priv, value);
+	} else {
+		/* Set Start/End Pixel/Line Pre-Clip */
+		iowrite32(left_offset << dsize, priv->base + VNSPPRC_REG);
+		iowrite32((left_offset + cam_subrect->width - 1) << dsize,
+			priv->base + VNEPPRC_REG);
 
-	value = (4096 * cam_subrect->height) / cam->out_height;
+		value = (4096 * cam_subrect->height) / cam->out_height;
 
-	switch (priv->field) {
-	case V4L2_FIELD_INTERLACED:
-	case V4L2_FIELD_INTERLACED_TB:
-	case V4L2_FIELD_INTERLACED_BT:
-		iowrite32(top_offset / 2, priv->base + VNSLPRC_REG);
-		iowrite32((top_offset + cam_subrect->height) / 2 +
-			  get_addon(cam_subrect->height / 2, value),
-			  priv->base + VNELPRC_REG);
-		break;
-	default:
-		iowrite32(top_offset, priv->base + VNSLPRC_REG);
-		iowrite32(top_offset + cam_subrect->height +
-			  get_addon(cam_subrect->height, value),
-			  priv->base + VNELPRC_REG);
-		break;
-	}
+		switch (priv->field) {
+		case V4L2_FIELD_INTERLACED:
+		case V4L2_FIELD_INTERLACED_TB:
+		case V4L2_FIELD_INTERLACED_BT:
+			iowrite32(top_offset / 2, priv->base + VNSLPRC_REG);
+			iowrite32((top_offset + cam_subrect->height) / 2 +
+				get_addon(cam_subrect->height / 2, value),
+				priv->base + VNELPRC_REG);
+			break;
+		default:
+			iowrite32(top_offset, priv->base + VNSLPRC_REG);
+			iowrite32(top_offset + cam_subrect->height +
+				get_addon(cam_subrect->height, value),
+				priv->base + VNELPRC_REG);
+			break;
+		}
 
-	/* Set scaling coefficient */
-	value = 0;
-	if (cam_subrect->height != cam->out_height)
-		value = (4096 * cam_subrect->height) / cam->out_height;
-	dev_dbg(icd->parent, "YS Value: %x\n", value);
-	iowrite32(value, priv->base + VNYS_REG);
+		/* Set scaling coefficient */
+		value = 0;
+		if (cam_subrect->height != cam->out_height)
+			value = (4096 * cam_subrect->height) / cam->out_height;
+		dev_dbg(icd->parent, "YS Value: %x\n", value);
+		iowrite32(value, priv->base + VNYS_REG);
 
-	value = 0;
-	if (cam_subrect->width != cam->out_width)
-		value = (4096 * cam_subrect->width) / cam->out_width;
+		value = 0;
+		if (cam_subrect->width != cam->out_width)
+			value = (4096 * cam_subrect->width) / cam->out_width;
 
-	/* Horizontal upscaling is up to double size */
-	if (0 < value && value < 2048)
-		value = 2048;
+		/* Horizontal upscaling is up to double size */
+		if (0 < value && value < 2048)
+			value = 2048;
 
-	dev_dbg(icd->parent, "XS Value: %x\n", value);
-	iowrite32(value, priv->base + VNXS_REG);
+		dev_dbg(icd->parent, "XS Value: %x\n", value);
+		iowrite32(value, priv->base + VNXS_REG);
 
-	/* Horizontal upscaling is carried out by scaling down from double size */
-	if (value < 4096)
-		value *= 2;
+		/* Horizontal upscaling is carried out by scaling down from double size */
+		if (value < 4096)
+			value *= 2;
 
-	set_coeff(priv, value);
+		set_coeff(priv, value);
+	}
 
 	/* Set Start/End Pixel/Line Post-Clip */
 	iowrite32(0, priv->base + VNSPPOC_REG);
@@ -1265,6 +1303,8 @@ static int rcar_vin_set_bus_param(struct soc_camera_device *icd)
 	if (!(common_flags & V4L2_MBUS_HSYNC_ACTIVE_LOW))
 		val |= VNDMR2_HPS;
 	iowrite32(val, priv->base + VNDMR2_REG);
+	/*fixme: hardcode
+	(val == 0x60021000) ? iowrite32(0x21000, priv->base + VNDMR2_REG) : iowrite32(val, priv->base + VNDMR2_REG);*/
 
 	ret = rcar_vin_set_rect(icd);
 	if (ret < 0)
@@ -1359,6 +1399,14 @@ static const struct soc_mbus_pixelfmt rcar_vin_formats[] = {
 		.order			= SOC_MBUS_ORDER_LE,
 		.layout			= SOC_MBUS_LAYOUT_PACKED,
 	},
+	{
+		.fourcc                 = V4L2_PIX_FMT_YUYV,
+		.name                   = "YUYV 20bit",
+		.bits_per_sample        = 20,
+		.packing                = SOC_MBUS_PACKING_NONE,
+		.order                  = SOC_MBUS_ORDER_LE,
+		.layout                 = SOC_MBUS_LAYOUT_PACKED,
+	},
 };
 
 static int rcar_vin_get_formats(struct soc_camera_device *icd, unsigned int idx,
@@ -1469,6 +1517,7 @@ static int rcar_vin_get_formats(struct soc_camera_device *icd, unsigned int idx,
 	case MEDIA_BUS_FMT_YUYV8_1X16:
 	case MEDIA_BUS_FMT_YUYV8_2X8:
 	case MEDIA_BUS_FMT_YUYV10_2X10:
+	case MEDIA_BUS_FMT_YUYV10_1X20:
 	case MEDIA_BUS_FMT_RGB888_1X24:
 		if (cam->extra_fmt)
 			break;
@@ -1819,6 +1868,8 @@ static int rcar_vin_set_crop(struct soc_camera_device *icd,
 	u32 vnmc;
 	int ret, i;
 
+	if (priv->chip == RZ_G1C)
+		a_writable.c.top = 16;
 	dev_dbg(dev, "S_CROP(%ux%u@%u:%u)\n", rect->width, rect->height,
 		rect->left, rect->top);
 
@@ -1879,10 +1930,15 @@ static int rcar_vin_get_crop(struct soc_camera_device *icd,
 			     struct v4l2_crop *a)
 {
 	struct rcar_vin_cam *cam = icd->host_priv;
+	struct soc_camera_host *ici = to_soc_camera_host(icd->parent);
+	struct rcar_vin_priv *priv = ici->priv;
 
 	a->type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
 	a->c = cam->subrect;
 
+	if (priv->chip == RZ_G1C)
+		a->c.top = 16;
+
 	return 0;
 }
 
@@ -1905,9 +1961,6 @@ static int rcar_vin_set_fmt(struct soc_camera_device *icd,
 	enum v4l2_field field;
 	v4l2_std_id std;
 
-	dev_dbg(dev, "S_FMT(pix=0x%x, %ux%u)\n",
-		pixfmt, pix->width, pix->height);
-
 	/* At the time of NV16 capture format, the user has to specify the
 	   width of the multiple of 32 for H/W specification. */
 	if (priv->error_flag == false)
@@ -1953,6 +2006,9 @@ static int rcar_vin_set_fmt(struct soc_camera_device *icd,
 		break;
 	}
 
+	if (priv->chip == RZ_G1C)
+		field = V4L2_FIELD_INTERLACED_BT;
+
 	xlate = soc_camera_xlate_by_fourcc(icd, pixfmt);
 	if (!xlate) {
 		dev_warn(dev, "Format %x not found\n", pixfmt);
@@ -1988,9 +2044,6 @@ static int rcar_vin_set_fmt(struct soc_camera_device *icd,
 				      can_scale, 12);
 
 	/* Done with the camera. Now see if we can improve the result */
-	dev_dbg(dev, "Camera %d fmt %ux%u, requested %ux%u\n",
-		ret, mf.width, mf.height, pix->width, pix->height);
-
 	if (ret == -ENOIOCTLCMD)
 		dev_dbg(dev, "Sensor doesn't support scaling\n");
 	else if (ret < 0)
@@ -2016,7 +2069,11 @@ static int rcar_vin_set_fmt(struct soc_camera_device *icd,
 	}
 
 	if (can_scale && !IS_ALIGNED(pix->width, 0x10)) {
-		return -EINVAL;
+		if (priv->chip == RZ_G1C) {
+			pix->width = vin_sub_width;
+			pix->height = vin_sub_height;
+		} else
+			return -EINVAL;
 	}
 
 	/* Prepare VIN crop */
@@ -2224,7 +2281,7 @@ static const struct of_device_id rcar_vin_of_table[] = {
 	{ .compatible = "renesas,vin-r8a7790", .data = (void *)RCAR_GEN2 },
 	{ .compatible = "renesas,vin-r8a7779", .data = (void *)RCAR_H1 },
 	{ .compatible = "renesas,vin-r8a7778", .data = (void *)RCAR_M1 },
-	{ .compatible = "renesas,rcar-gen2-vin", .data = (void *)RCAR_GEN2 },
+	{ .compatible = "renesas,vin-r8a77470", .data = (void *)RZ_G1C },
 	{ },
 };
 MODULE_DEVICE_TABLE(of, rcar_vin_of_table);
@@ -2234,6 +2291,7 @@ static struct platform_device_id rcar_vin_id_table[] = {
 	{ "r8a7779-vin",  RCAR_H1 },
 	{ "r8a7778-vin",  RCAR_M1 },
 	{ "uPD35004-vin", RCAR_E1 },
+	{ "vin-r8a77470", RZ_G1C },
 	{},
 };
 MODULE_DEVICE_TABLE(platform, rcar_vin_id_table);
-- 
2.7.4

