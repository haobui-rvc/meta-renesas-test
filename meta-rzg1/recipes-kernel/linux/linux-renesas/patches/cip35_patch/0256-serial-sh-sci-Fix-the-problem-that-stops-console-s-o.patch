From e141f7e39f9f5a7295ebfd895f7868b0bd945851 Mon Sep 17 00:00:00 2001
From: "Nguyen Van Linh [FGA.BU13]" <LinhNv25@fsoft.com.vn>
Date: Mon, 9 Apr 2018 23:25:48 +0700
Subject: [PATCH 256/628] serial: sh-sci: Fix the problem that stops console's
 output in rebooting

	Commit: <ddd55785df8f42871e1f9f1e3c5c14c1064af36e>
	From:	git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-backport.git

	When using SCIFAx, the problem that stops serial console's output
	in rebooting occurrs. The sequence is as follows.

	1. Init process kills getty process.
	2. Init process outputs message with using open()/write()/close()
	/dev/console.

	In close(), sci_shutdown() in SCIF driver is called and disables
	transmission.
	When using SCIFAx, data is left in the transmit FIFO.

	3. Getty process killed from init process executes tcsetattr().

	In tcsetattr(), sci_reset() in SCIF driver is called
	and waits for completing transmission.
	However, because transmission was disabled, transmission doesn't complete
	forever.
	(When using SCIFx, data is not left in executing close().
	Therefore, the wait in sci_reset() doesn't occur.)

	This patch fixes sci_shutdown() to wait for completing transmission.

Signed-off-by: Shinichi Yamada <shinichi.yamada.ku@ps.hitachi-solutions.com>
Signed-off-by: Hiroki Negishi <hiroki.negishi.zr@hitachi-solutions.com>
Signed-off-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
Signed-off-by: tungvo <tung.vo.eb@rvc.renesas.com>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNv25@fsoft.com.vn>
Signed-off-by: vietn <vietn@fsoft.com.vn>
---
 drivers/tty/serial/sh-sci.c | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/drivers/tty/serial/sh-sci.c b/drivers/tty/serial/sh-sci.c
index a65e708..72822ea 100644
--- a/drivers/tty/serial/sh-sci.c
+++ b/drivers/tty/serial/sh-sci.c
@@ -1935,6 +1935,27 @@ static int sci_startup(struct uart_port *port)
 	return 0;
 }
 
+#define TX_DRAIN_LOOP_MAX 200
+
+static void sci_drain_tx(struct uart_port *port)
+{
+	unsigned int status;
+	unsigned int mask;
+	int i;
+
+	serial_port_out(port, SCSCR, SCSCR_TE);
+
+	mask = SCxSR_TEND(port);
+	for (i = 0; i < TX_DRAIN_LOOP_MAX; i++) {
+		status = serial_port_in(port, SCxSR);
+		if ((status & mask) == mask)
+			break;
+		mdelay(2);
+	}
+
+	serial_port_out(port, SCSCR, 0x00);
+}
+
 static void sci_shutdown(struct uart_port *port)
 {
 	struct sci_port *s = to_sci_port(port);
@@ -1948,6 +1969,7 @@ static void sci_shutdown(struct uart_port *port)
 	spin_lock_irqsave(&port->lock, flags);
 	sci_stop_rx(port);
 	sci_stop_tx(port);
+	sci_drain_tx(port);
 	spin_unlock_irqrestore(&port->lock, flags);
 
 #ifdef CONFIG_SERIAL_SH_SCI_DMA
-- 
2.7.4

