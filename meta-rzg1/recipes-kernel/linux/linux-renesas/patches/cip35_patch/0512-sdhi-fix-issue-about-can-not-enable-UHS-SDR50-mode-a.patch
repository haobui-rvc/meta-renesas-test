From b8b6f455b3290ee3d5476aabd7598dc759286763 Mon Sep 17 00:00:00 2001
From: hienhuynh <hien.huynh.px@rvc.renenas.com>
Date: Mon, 23 Apr 2018 11:29:55 +0700
Subject: [PATCH 512/628] sdhi: fix issue about can not enable UHS SDR50 mode
 after rebooting

Signed-off-by: hienhuynh <hien.huynh.px@rvc.renenas.com>
Signed-off-by: vietn <vietn@fsoft.com.vn>
---
 drivers/mmc/core/core.c  | 23 +++++++++++++++++++++++
 drivers/mmc/core/core.h  |  1 +
 drivers/mmc/core/sd.c    | 49 ++++++++++++++++++++++++++++++++++++++++++++++++
 include/linux/mmc/card.h |  6 ++++++
 include/linux/mmc/host.h |  1 +
 5 files changed, 80 insertions(+)

diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index df074f8..c863a73 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -1546,6 +1546,29 @@ u32 mmc_select_voltage(struct mmc_host *host, u32 ocr)
 	return ocr;
 }
 
+int mmc_host_set_uhs_voltage(struct mmc_host *host)
+{
+	u32 clock;
+	/*
+	* During a signal voltage level switch, the clock must be gated
+	* for 5 ms according to the SD spec
+	*/
+
+	clock = host->ios.clock;
+	host->ios.clock = 0;
+	mmc_set_ios(host);
+
+	if (__mmc_set_signal_voltage(host, MMC_SIGNAL_VOLTAGE_180))
+		return -EAGAIN;
+
+	/* Keep clock gated for at least 10 ms, though spec only says 5 ms */
+	mmc_delay(10);
+	host->ios.clock = clock;
+	mmc_set_ios(host);
+
+	return 0;
+}
+
 int __mmc_set_signal_voltage(struct mmc_host *host, int signal_voltage)
 {
 	int err = 0;
diff --git a/drivers/mmc/core/core.h b/drivers/mmc/core/core.h
index 09241e5..b6c191d 100644
--- a/drivers/mmc/core/core.h
+++ b/drivers/mmc/core/core.h
@@ -42,6 +42,7 @@ void mmc_set_chip_select(struct mmc_host *host, int mode);
 void mmc_set_clock(struct mmc_host *host, unsigned int hz);
 void mmc_set_bus_mode(struct mmc_host *host, unsigned int mode);
 void mmc_set_bus_width(struct mmc_host *host, unsigned int width);
+int mmc_host_set_uhs_voltage(struct mmc_host *host);
 u32 mmc_select_voltage(struct mmc_host *host, u32 ocr);
 int mmc_set_signal_voltage(struct mmc_host *host, int signal_voltage, u32 ocr);
 int __mmc_set_signal_voltage(struct mmc_host *host, int signal_voltage);
diff --git a/drivers/mmc/core/sd.c b/drivers/mmc/core/sd.c
index fb8741f..55ce13c 100644
--- a/drivers/mmc/core/sd.c
+++ b/drivers/mmc/core/sd.c
@@ -499,6 +499,18 @@ static int sd_set_bus_speed_mode(struct mmc_card *card, u8 *status)
 	return 0;
 }
 
+static bool mmc_sd_card_using_v18(struct mmc_card *card)
+{
+	/*
+	* According to the SD spec., the Bus Speed Mode (function group 1) bits
+	* 2 to 4 are zero if the card is initialized at 3.3V signal level. Thus
+	* they can be used to determine if the card has already switched to
+	* 1.8V signaling.
+	*/
+	return card->sw_caps.sd3_bus_mode &
+		(SD_MODE_UHS_SDR50 | SD_MODE_UHS_SDR104 | SD_MODE_UHS_DDR50);
+}
+
 /* Get host's max current setting at its current voltage */
 static u32 sd_get_host_max_current(struct mmc_host *host)
 {
@@ -904,10 +916,12 @@ static int mmc_sd_init_card(struct mmc_host *host, u32 ocr,
 	int err;
 	u32 cid[4];
 	u32 rocr = 0;
+	bool v18_fixup_failed = false;
 
 	BUG_ON(!host);
 	WARN_ON(!host->claimed);
 
+retry:
 	err = mmc_sd_get_cid(host, ocr, cid, &rocr);
 	if (err)
 		return err;
@@ -973,6 +987,40 @@ static int mmc_sd_init_card(struct mmc_host *host, u32 ocr,
 	if (err)
 		goto free_card;
 
+	/*
+	* If the card has not been power cycled, it may still be using 1.8V
+	* signaling. Detect that situation and try to initialize a UHS-I (1.8V)
+	* transfer mode.
+	*/
+	if (!v18_fixup_failed && !mmc_host_is_spi(host) && mmc_host_uhs(host)
+		&& mmc_sd_card_using_v18(card) &&
+		host->ios.signal_voltage != MMC_SIGNAL_VOLTAGE_180) {
+	/*
+	 * Re-read switch information in case it has changed since
+	 * oldcard was initialized.
+	 */
+	if (oldcard) {
+		err = mmc_read_switch(card);
+		if (err)
+			goto free_card;
+	}
+	if (mmc_sd_card_using_v18(card)) {
+		if (mmc_host_set_uhs_voltage(host) ||
+			mmc_sd_init_uhs_card(card)) {
+			v18_fixup_failed = true;
+			host->ocr = ocr;
+			mmc_power_cycle(host, ocr);
+			if (!oldcard)
+				mmc_remove_card(card);
+				goto retry;
+		}
+
+		/* Card is an ultra-high-speed card */
+		mmc_card_set_uhs(card);
+		goto done;
+	}
+}
+
 	/* Initialization sequence for UHS-I cards */
 	if (rocr & SD_ROCR_S18A) {
 		err = mmc_sd_init_uhs_card(card);
@@ -1006,6 +1054,7 @@ static int mmc_sd_init_card(struct mmc_host *host, u32 ocr,
 		}
 	}
 
+done:
 	host->card = card;
 	return 0;
 
diff --git a/include/linux/mmc/card.h b/include/linux/mmc/card.h
index eb0151b..e47ae088 100644
--- a/include/linux/mmc/card.h
+++ b/include/linux/mmc/card.h
@@ -262,6 +262,10 @@ struct mmc_card {
 #define MMC_CARD_SDXC		(1<<3)		/* card is SDXC */
 #define MMC_CARD_REMOVED	(1<<4)		/* card has been removed */
 #define MMC_STATE_DOING_BKOPS	(1<<5)		/* card is doing BKOPS */
+
+/* card is in ultra high speed mode */
+#define MMC_STATE_ULTRAHIGHSPEED (1<<5)
+
 #define MMC_STATE_SUSPENDED	(1<<6)		/* card is suspended */
 	unsigned int		quirks; 	/* card quirks */
 #define MMC_QUIRK_LENIENT_FN0	(1<<0)		/* allow SDIO FN0 writes outside of the VS CCCR range */
@@ -442,6 +446,8 @@ static inline void __maybe_unused remove_quirk(struct mmc_card *card, int data)
 #define mmc_card_set_suspended(c) ((c)->state |= MMC_STATE_SUSPENDED)
 #define mmc_card_clr_suspended(c) ((c)->state &= ~MMC_STATE_SUSPENDED)
 
+#define mmc_card_set_uhs(c) ((c)->state |= MMC_STATE_ULTRAHIGHSPEED)
+
 /*
  * Quirk add/remove for MMC products.
  */
diff --git a/include/linux/mmc/host.h b/include/linux/mmc/host.h
index 8673ffe..6533497 100644
--- a/include/linux/mmc/host.h
+++ b/include/linux/mmc/host.h
@@ -212,6 +212,7 @@ struct mmc_host {
 	u32			ocr_avail_sdio;	/* SDIO-specific OCR */
 	u32			ocr_avail_sd;	/* SD-specific OCR */
 	u32			ocr_avail_mmc;	/* MMC-specific OCR */
+	u32			ocr;
 	struct notifier_block	pm_notify;
 	u32			max_current_330;
 	u32			max_current_300;
-- 
2.7.4

