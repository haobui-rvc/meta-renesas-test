From 43f14e81e0e4f6f7e62f66ec857d4afb97d0e5a1 Mon Sep 17 00:00:00 2001
From: hienhuynh <hien.huynh.px@rvc.renenas.com>
Date: Tue, 5 Jun 2018 09:26:52 +0700
Subject: [PATCH 258/628] serial: sh-sci: Fix repeats of previous printed
 messages in rebooting

Commit: <0cb93b42b22eea71c4da84d8b0a20afbff603d26>
From: 	git://git.kernel.org/pub/scm/linux/kernel/git/horms/renesas-backport.git

A problem that previous printed messages are repeated occurs
in rebooting with DMA transfer enabled.
This is because SCIF driver doesn't care flush of UART ring buffer.

When DMA transfer completes, SCIF driver updates a tail index of UART ring
buffer, and checks a difference between a head and a tail.
If a head differs from a tail, SCIF driver transfers the difference.

Though, when the flush occurs, a head and a tail are both cleared
(become 0).
Therefore, if the flush occurs during DMA transfer,
updating a tail index causes a difference,
and then previous printed messages are transferred.

This patch fixes SCIF driver so that SCIF driver cares the flush during DMA
transfer.

1. Create a method, struct uart_ops.flush_buffer(sci_flush_buffer).
   When the flush occurs, this method is called from Serial core interface.

2. If sci_flush_buffer is called during DMA transfer,
   SCIF driver doesn't update tail of UART ring buffer.

Signed-off-by: Ryuichi Ando <ryuichi.ando.jz@ps.hitachi-solutions.com>
Signed-off-by: Hiroki Negishi <hiroki.negishi.zr@hitachi-solutions.com>
Signed-off-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
Signed-off-by: tungvo <tung.vo.eb@rvc.renesas.com>
Signed-off-by: Nguyen Van Linh [FGA.BU13] <LinhNv25@fsoft.com.vn>
Signed-off-by: vietn <vietn@fsoft.com.vn>
Signed-off-by: hienhuynh <hien.huynh.px@rvc.renenas.com>
---
 drivers/tty/serial/sh-sci.c | 20 ++++++++++++++++----
 drivers/tty/serial/sh-sci.h |  4 ++++
 2 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/drivers/tty/serial/sh-sci.c b/drivers/tty/serial/sh-sci.c
index b2b2f35..67ce742 100644
--- a/drivers/tty/serial/sh-sci.c
+++ b/drivers/tty/serial/sh-sci.c
@@ -116,6 +116,7 @@ struct sci_port {
 	struct work_struct		work_tx;
 	struct timer_list		rx_timer;
 	unsigned int			rx_timeout;
+	int                             circ_flush_flag;
 #endif
 
 	bool autorts;
@@ -1040,10 +1041,11 @@ static void sci_dma_tx_complete(void *arg)
 
 	spin_lock_irqsave(&port->lock, flags);
 
-	xmit->tail += s->tx_dma_len;
-	xmit->tail &= UART_XMIT_SIZE - 1;
-
-	port->icount.tx += s->tx_dma_len;
+	if (s->circ_flush_flag == SCI_CIRC_FLSH_OFF) {
+		xmit->tail += sg_dma_len(&s->sg_tx);
+		mit->tail &= UART_XMIT_SIZE - 1;
+		port->icount.tx += sg_dma_len(&s->sg_tx);
+	}
 
 	if (uart_circ_chars_pending(xmit) < WAKEUP_CHARS)
 		uart_write_wakeup(port);
@@ -1241,6 +1243,7 @@ static void work_fn_tx(struct work_struct *work)
 	 * consistent xmit buffer state.
 	 */
 	spin_lock_irq(&port->lock);
+	s->circ_flush_flag = SCI_CIRC_FLSH_OFF;
 	buf = s->tx_dma_addr + (xmit->tail & (UART_XMIT_SIZE - 1));
 	s->tx_dma_len = min_t(unsigned int,
 		CIRC_CNT(xmit->head, xmit->tail, UART_XMIT_SIZE),
@@ -2072,6 +2075,15 @@ static void sci_baud_calc_hscif(unsigned int bps, unsigned long freq,
 	}
 }
 
+static void sci_flush_buffer(struct uart_port *port)
+{
+#ifdef CONFIG_SERIAL_SH_SCI_DMA
+	struct sci_port *s = to_sci_port(port);
+
+	s->circ_flush_flag = SCI_CIRC_FLSH_ON;
+#endif
+}
+
 static void sci_reset(struct uart_port *port)
 {
 	const struct plat_sci_reg *reg;
diff --git a/drivers/tty/serial/sh-sci.h b/drivers/tty/serial/sh-sci.h
index 1b699ea..7fd6436 100644
--- a/drivers/tty/serial/sh-sci.h
+++ b/drivers/tty/serial/sh-sci.h
@@ -6,6 +6,10 @@
 #define SCI_MAJOR		204
 #define SCI_MINOR_START		8
 
+#ifdef CONFIG_SERIAL_SH_SCI_DMA
+#define SCI_CIRC_FLSH_OFF      0
+#define SCI_CIRC_FLSH_ON       1
+#endif
 
 /*
  * SCI register subset common for all port types.
-- 
2.7.4

